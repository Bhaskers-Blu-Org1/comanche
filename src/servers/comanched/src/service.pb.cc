/*
   Copyright [2017-2019] [IBM Corporation]
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
       http://www.apache.org/licenses/LICENSE-2.0
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ipc_protocol {

namespace {

const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateSessionReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateSessionReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutdownSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutdownSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReleaseSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReleaseSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllocDmaMemory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllocDmaMemory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SessionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_service_2eproto() {
  protobuf_AddDesc_service_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service.proto");
  GOOGLE_CHECK(file != NULL);
  Header_descriptor_ = file->message_type(0);
  static const int Header_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, auth_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, auth_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, debug_code_),
  };
  Header_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      -1,
      -1,
      sizeof(Header),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
      -1);
  CreateSessionRequest_descriptor_ = file->message_type(1);
  static const int CreateSessionRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, hdr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, slab_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, memory_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, storage_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, virtual_size_),
  };
  CreateSessionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateSessionRequest_descriptor_,
      CreateSessionRequest::default_instance_,
      CreateSessionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CreateSessionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, _internal_metadata_),
      -1);
  CreateSessionReply_descriptor_ = file->message_type(2);
  static const int CreateSessionReply_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, hdr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, phys_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, virt_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, storage_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, foobar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, reconstructed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, phys_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, block_size_),
  };
  CreateSessionReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateSessionReply_descriptor_,
      CreateSessionReply::default_instance_,
      CreateSessionReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, _has_bits_[0]),
      -1,
      -1,
      sizeof(CreateSessionReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionReply, _internal_metadata_),
      -1);
  ShutdownSession_descriptor_ = file->message_type(3);
  static const int ShutdownSession_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownSession, hdr_),
  };
  ShutdownSession_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShutdownSession_descriptor_,
      ShutdownSession::default_instance_,
      ShutdownSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownSession, _has_bits_[0]),
      -1,
      -1,
      sizeof(ShutdownSession),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownSession, _internal_metadata_),
      -1);
  ReleaseSessionRequest_descriptor_ = file->message_type(4);
  static const int ReleaseSessionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseSessionRequest, hdr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseSessionRequest, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseSessionRequest, session_id_),
  };
  ReleaseSessionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReleaseSessionRequest_descriptor_,
      ReleaseSessionRequest::default_instance_,
      ReleaseSessionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseSessionRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReleaseSessionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseSessionRequest, _internal_metadata_),
      -1);
  AllocDmaMemory_descriptor_ = file->message_type(5);
  static const int AllocDmaMemory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocDmaMemory, hdr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocDmaMemory, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocDmaMemory, size_),
  };
  AllocDmaMemory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AllocDmaMemory_descriptor_,
      AllocDmaMemory::default_instance_,
      AllocDmaMemory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocDmaMemory, _has_bits_[0]),
      -1,
      -1,
      sizeof(AllocDmaMemory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocDmaMemory, _internal_metadata_),
      -1);
  Ack_descriptor_ = file->message_type(6);
  static const int Ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, hdr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, code_),
  };
  Ack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Ack_descriptor_,
      Ack::default_instance_,
      Ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, _has_bits_[0]),
      -1,
      -1,
      sizeof(Ack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, _internal_metadata_),
      -1);
  MessageType_descriptor_ = file->enum_type(0);
  SessionType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateSessionRequest_descriptor_, &CreateSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateSessionReply_descriptor_, &CreateSessionReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShutdownSession_descriptor_, &ShutdownSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReleaseSessionRequest_descriptor_, &ReleaseSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AllocDmaMemory_descriptor_, &AllocDmaMemory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Ack_descriptor_, &Ack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_2eproto() {
  delete Header::default_instance_;
  delete Header_reflection_;
  delete CreateSessionRequest::default_instance_;
  delete CreateSessionRequest_reflection_;
  delete CreateSessionReply::default_instance_;
  delete CreateSessionReply_reflection_;
  delete ShutdownSession::default_instance_;
  delete ShutdownSession_reflection_;
  delete ReleaseSessionRequest::default_instance_;
  delete ReleaseSessionRequest_reflection_;
  delete AllocDmaMemory::default_instance_;
  delete AllocDmaMemory_reflection_;
  delete Ack::default_instance_;
  delete Ack_reflection_;
}

void protobuf_AddDesc_service_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_service_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rservice.proto\022\014ipc_protocol\"O\n\006Header\022"
    "\014\n\004type\030\001 \002(\007\022\017\n\007auth_id\030\002 \002(\t\022\022\n\nauth_t"
    "oken\030\003 \002(\t\022\022\n\ndebug_code\030\004 \001(\r\"\274\001\n\024Creat"
    "eSessionRequest\022!\n\003hdr\030\001 \002(\0132\024.ipc_proto"
    "col.Header\022/\n\014session_type\030\002 \002(\0162\031.ipc_p"
    "rotocol.SessionType\022\017\n\007slab_id\030\003 \001(\t\022\023\n\013"
    "memory_size\030\004 \001(\004\022\024\n\014storage_size\030\005 \001(\004\022"
    "\024\n\014virtual_size\030\006 \001(\004\"\203\002\n\022CreateSessionR"
    "eply\022!\n\003hdr\030\001 \002(\0132\024.ipc_protocol.Header\022"
    "\016\n\006status\030\002 \002(\003\022\022\n\nsession_id\030\003 \002(\t\022\021\n\tp"
    "hys_addr\030\004 \001(\006\022\021\n\tvirt_addr\030\005 \001(\006\022\024\n\014sto"
    "rage_addr\030\006 \001(\006\022\016\n\006foobar\030\007 \001(\007\022\025\n\rrecon"
    "structed\030\010 \001(\010\022\021\n\tphys_size\030\t \001(\004\022\014\n\004pat"
    "h\030\n \001(\t\022\016\n\006offset\030\013 \001(\004\022\022\n\nblock_size\030\014 "
    "\001(\r\"4\n\017ShutdownSession\022!\n\003hdr\030\001 \002(\0132\024.ip"
    "c_protocol.Header\"\177\n\025ReleaseSessionReque"
    "st\022!\n\003hdr\030\001 \002(\0132\024.ipc_protocol.Header\022/\n"
    "\014session_type\030\002 \002(\0162\031.ipc_protocol.Sessi"
    "onType\022\022\n\nsession_id\030\003 \002(\t\"N\n\016AllocDmaMe"
    "mory\022!\n\003hdr\030\001 \002(\0132\024.ipc_protocol.Header\022"
    "\013\n\003pid\030\002 \002(\004\022\014\n\004size\030\003 \002(\004\"6\n\003Ack\022!\n\003hdr"
    "\030\001 \002(\0132\024.ipc_protocol.Header\022\014\n\004code\030\002 \002"
    "(\021*\237\001\n\013MessageType\022\t\n\005__Ack\020d\022\032\n\026__Creat"
    "eSessionRequest\020\001\022\030\n\024__CreateSessionRepl"
    "y\020\002\022\034\n\030__ShutdownSessionRequest\020\003\022\033\n\027__R"
    "eleaseSessionRequest\020\004\022\024\n\020__AllocDmaMemo"
    "ry\020\005*8\n\013SessionType\022\027\n\023FastSharedMemoryI"
    "PC\020\002\022\020\n\014SharedIOSlab\020\003", 1102);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service.proto", &protobuf_RegisterTypes);
  Header::default_instance_ = new Header();
  CreateSessionRequest::default_instance_ = new CreateSessionRequest();
  CreateSessionReply::default_instance_ = new CreateSessionReply();
  ShutdownSession::default_instance_ = new ShutdownSession();
  ReleaseSessionRequest::default_instance_ = new ReleaseSessionRequest();
  AllocDmaMemory::default_instance_ = new AllocDmaMemory();
  Ack::default_instance_ = new Ack();
  Header::default_instance_->InitAsDefaultInstance();
  CreateSessionRequest::default_instance_->InitAsDefaultInstance();
  CreateSessionReply::default_instance_->InitAsDefaultInstance();
  ShutdownSession::default_instance_->InitAsDefaultInstance();
  ReleaseSessionRequest::default_instance_->InitAsDefaultInstance();
  AllocDmaMemory::default_instance_->InitAsDefaultInstance();
  Ack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_2eproto {
  StaticDescriptorInitializer_service_2eproto() {
    protobuf_AddDesc_service_2eproto();
  }
} static_descriptor_initializer_service_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SessionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionType_descriptor_;
}
bool SessionType_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kTypeFieldNumber;
const int Header::kAuthIdFieldNumber;
const int Header::kAuthTokenFieldNumber;
const int Header::kDebugCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc_protocol.Header)
}

void Header::InitAsDefaultInstance() {
}

Header::Header(const Header& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ipc_protocol.Header)
}

void Header::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  auth_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:ipc_protocol.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  auth_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc_protocol.Header)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Header, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Header*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(type_, debug_code_);
    if (has_auth_id()) {
      auth_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_auth_token()) {
      auth_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ipc_protocol.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 type = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_auth_id;
        break;
      }

      // required string auth_id = 2;
      case 2: {
        if (tag == 18) {
         parse_auth_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->auth_id().data(), this->auth_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ipc_protocol.Header.auth_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_auth_token;
        break;
      }

      // required string auth_token = 3;
      case 3: {
        if (tag == 26) {
         parse_auth_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->auth_token().data(), this->auth_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ipc_protocol.Header.auth_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_debug_code;
        break;
      }

      // optional uint32 debug_code = 4;
      case 4: {
        if (tag == 32) {
         parse_debug_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &debug_code_)));
          set_has_debug_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc_protocol.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc_protocol.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc_protocol.Header)
  // required fixed32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->type(), output);
  }

  // required string auth_id = 2;
  if (has_auth_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_id().data(), this->auth_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipc_protocol.Header.auth_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->auth_id(), output);
  }

  // required string auth_token = 3;
  if (has_auth_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_token().data(), this->auth_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipc_protocol.Header.auth_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->auth_token(), output);
  }

  // optional uint32 debug_code = 4;
  if (has_debug_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->debug_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ipc_protocol.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipc_protocol.Header)
  // required fixed32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->type(), target);
  }

  // required string auth_id = 2;
  if (has_auth_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_id().data(), this->auth_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipc_protocol.Header.auth_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->auth_id(), target);
  }

  // required string auth_token = 3;
  if (has_auth_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_token().data(), this->auth_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipc_protocol.Header.auth_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->auth_token(), target);
  }

  // optional uint32 debug_code = 4;
  if (has_debug_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->debug_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipc_protocol.Header)
  return target;
}

int Header::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ipc_protocol.Header)
  int total_size = 0;

  if (has_type()) {
    // required fixed32 type = 1;
    total_size += 1 + 4;
  }

  if (has_auth_id()) {
    // required string auth_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth_id());
  }

  if (has_auth_token()) {
    // required string auth_token = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth_token());
  }

  return total_size;
}
int Header::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ipc_protocol.Header)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required fixed32 type = 1;
    total_size += 1 + 4;

    // required string auth_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth_id());

    // required string auth_token = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth_token());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 debug_code = 4;
  if (has_debug_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->debug_code());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipc_protocol.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Header* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipc_protocol.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipc_protocol.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc_protocol.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_auth_id()) {
      set_has_auth_id();
      auth_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_id_);
    }
    if (from.has_auth_token()) {
      set_has_auth_token();
      auth_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
    }
    if (from.has_debug_code()) {
      set_debug_code(from.debug_code());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipc_protocol.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc_protocol.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  std::swap(type_, other->type_);
  auth_id_.Swap(&other->auth_id_);
  auth_token_.Swap(&other->auth_token_);
  std::swap(debug_code_, other->debug_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// required fixed32 type = 1;
bool Header::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Header::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Header::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Header::clear_type() {
  type_ = 0u;
  clear_has_type();
}
 ::google::protobuf::uint32 Header::type() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.Header.type)
  return type_;
}
 void Header::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.Header.type)
}

// required string auth_id = 2;
bool Header::has_auth_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Header::set_has_auth_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Header::clear_has_auth_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Header::clear_auth_id() {
  auth_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_id();
}
 const ::std::string& Header::auth_id() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.Header.auth_id)
  return auth_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_auth_id(const ::std::string& value) {
  set_has_auth_id();
  auth_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc_protocol.Header.auth_id)
}
 void Header::set_auth_id(const char* value) {
  set_has_auth_id();
  auth_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc_protocol.Header.auth_id)
}
 void Header::set_auth_id(const char* value, size_t size) {
  set_has_auth_id();
  auth_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc_protocol.Header.auth_id)
}
 ::std::string* Header::mutable_auth_id() {
  set_has_auth_id();
  // @@protoc_insertion_point(field_mutable:ipc_protocol.Header.auth_id)
  return auth_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_auth_id() {
  // @@protoc_insertion_point(field_release:ipc_protocol.Header.auth_id)
  clear_has_auth_id();
  return auth_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_auth_id(::std::string* auth_id) {
  if (auth_id != NULL) {
    set_has_auth_id();
  } else {
    clear_has_auth_id();
  }
  auth_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_id);
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.Header.auth_id)
}

// required string auth_token = 3;
bool Header::has_auth_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Header::set_has_auth_token() {
  _has_bits_[0] |= 0x00000004u;
}
void Header::clear_has_auth_token() {
  _has_bits_[0] &= ~0x00000004u;
}
void Header::clear_auth_token() {
  auth_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_token();
}
 const ::std::string& Header::auth_token() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.Header.auth_token)
  return auth_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_auth_token(const ::std::string& value) {
  set_has_auth_token();
  auth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc_protocol.Header.auth_token)
}
 void Header::set_auth_token(const char* value) {
  set_has_auth_token();
  auth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc_protocol.Header.auth_token)
}
 void Header::set_auth_token(const char* value, size_t size) {
  set_has_auth_token();
  auth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc_protocol.Header.auth_token)
}
 ::std::string* Header::mutable_auth_token() {
  set_has_auth_token();
  // @@protoc_insertion_point(field_mutable:ipc_protocol.Header.auth_token)
  return auth_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_auth_token() {
  // @@protoc_insertion_point(field_release:ipc_protocol.Header.auth_token)
  clear_has_auth_token();
  return auth_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_auth_token(::std::string* auth_token) {
  if (auth_token != NULL) {
    set_has_auth_token();
  } else {
    clear_has_auth_token();
  }
  auth_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_token);
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.Header.auth_token)
}

// optional uint32 debug_code = 4;
bool Header::has_debug_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Header::set_has_debug_code() {
  _has_bits_[0] |= 0x00000008u;
}
void Header::clear_has_debug_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void Header::clear_debug_code() {
  debug_code_ = 0u;
  clear_has_debug_code();
}
 ::google::protobuf::uint32 Header::debug_code() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.Header.debug_code)
  return debug_code_;
}
 void Header::set_debug_code(::google::protobuf::uint32 value) {
  set_has_debug_code();
  debug_code_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.Header.debug_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateSessionRequest::kHdrFieldNumber;
const int CreateSessionRequest::kSessionTypeFieldNumber;
const int CreateSessionRequest::kSlabIdFieldNumber;
const int CreateSessionRequest::kMemorySizeFieldNumber;
const int CreateSessionRequest::kStorageSizeFieldNumber;
const int CreateSessionRequest::kVirtualSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSessionRequest::CreateSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc_protocol.CreateSessionRequest)
}

void CreateSessionRequest::InitAsDefaultInstance() {
  hdr_ = const_cast< ::ipc_protocol::Header*>(&::ipc_protocol::Header::default_instance());
}

CreateSessionRequest::CreateSessionRequest(const CreateSessionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ipc_protocol.CreateSessionRequest)
}

void CreateSessionRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hdr_ = NULL;
  session_type_ = 2;
  slab_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memory_size_ = GOOGLE_ULONGLONG(0);
  storage_size_ = GOOGLE_ULONGLONG(0);
  virtual_size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateSessionRequest::~CreateSessionRequest() {
  // @@protoc_insertion_point(destructor:ipc_protocol.CreateSessionRequest)
  SharedDtor();
}

void CreateSessionRequest::SharedDtor() {
  slab_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete hdr_;
  }
}

void CreateSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateSessionRequest_descriptor_;
}

const CreateSessionRequest& CreateSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

CreateSessionRequest* CreateSessionRequest::default_instance_ = NULL;

CreateSessionRequest* CreateSessionRequest::New(::google::protobuf::Arena* arena) const {
  CreateSessionRequest* n = new CreateSessionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc_protocol.CreateSessionRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CreateSessionRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CreateSessionRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(memory_size_, virtual_size_);
    if (has_hdr()) {
      if (hdr_ != NULL) hdr_->::ipc_protocol::Header::Clear();
    }
    session_type_ = 2;
    if (has_slab_id()) {
      slab_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CreateSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ipc_protocol.CreateSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ipc_protocol.Header hdr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .ipc_protocol.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ipc_protocol::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::ipc_protocol::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_slab_id;
        break;
      }

      // optional string slab_id = 3;
      case 3: {
        if (tag == 26) {
         parse_slab_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slab_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->slab_id().data(), this->slab_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ipc_protocol.CreateSessionRequest.slab_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_memory_size;
        break;
      }

      // optional uint64 memory_size = 4;
      case 4: {
        if (tag == 32) {
         parse_memory_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memory_size_)));
          set_has_memory_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_storage_size;
        break;
      }

      // optional uint64 storage_size = 5;
      case 5: {
        if (tag == 40) {
         parse_storage_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &storage_size_)));
          set_has_storage_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_virtual_size;
        break;
      }

      // optional uint64 virtual_size = 6;
      case 6: {
        if (tag == 48) {
         parse_virtual_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &virtual_size_)));
          set_has_virtual_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc_protocol.CreateSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc_protocol.CreateSessionRequest)
  return false;
#undef DO_
}

void CreateSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc_protocol.CreateSessionRequest)
  // required .ipc_protocol.Header hdr = 1;
  if (has_hdr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hdr_, output);
  }

  // required .ipc_protocol.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // optional string slab_id = 3;
  if (has_slab_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slab_id().data(), this->slab_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipc_protocol.CreateSessionRequest.slab_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->slab_id(), output);
  }

  // optional uint64 memory_size = 4;
  if (has_memory_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->memory_size(), output);
  }

  // optional uint64 storage_size = 5;
  if (has_storage_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->storage_size(), output);
  }

  // optional uint64 virtual_size = 6;
  if (has_virtual_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->virtual_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ipc_protocol.CreateSessionRequest)
}

::google::protobuf::uint8* CreateSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipc_protocol.CreateSessionRequest)
  // required .ipc_protocol.Header hdr = 1;
  if (has_hdr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->hdr_, false, target);
  }

  // required .ipc_protocol.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // optional string slab_id = 3;
  if (has_slab_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slab_id().data(), this->slab_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipc_protocol.CreateSessionRequest.slab_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->slab_id(), target);
  }

  // optional uint64 memory_size = 4;
  if (has_memory_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->memory_size(), target);
  }

  // optional uint64 storage_size = 5;
  if (has_storage_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->storage_size(), target);
  }

  // optional uint64 virtual_size = 6;
  if (has_virtual_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->virtual_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipc_protocol.CreateSessionRequest)
  return target;
}

int CreateSessionRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ipc_protocol.CreateSessionRequest)
  int total_size = 0;

  if (has_hdr()) {
    // required .ipc_protocol.Header hdr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hdr_);
  }

  if (has_session_type()) {
    // required .ipc_protocol.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  return total_size;
}
int CreateSessionRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ipc_protocol.CreateSessionRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ipc_protocol.Header hdr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hdr_);

    // required .ipc_protocol.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 60u) {
    // optional string slab_id = 3;
    if (has_slab_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slab_id());
    }

    // optional uint64 memory_size = 4;
    if (has_memory_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memory_size());
    }

    // optional uint64 storage_size = 5;
    if (has_storage_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->storage_size());
    }

    // optional uint64 virtual_size = 6;
    if (has_virtual_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->virtual_size());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipc_protocol.CreateSessionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateSessionRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipc_protocol.CreateSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipc_protocol.CreateSessionRequest)
    MergeFrom(*source);
  }
}

void CreateSessionRequest::MergeFrom(const CreateSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc_protocol.CreateSessionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hdr()) {
      mutable_hdr()->::ipc_protocol::Header::MergeFrom(from.hdr());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_slab_id()) {
      set_has_slab_id();
      slab_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slab_id_);
    }
    if (from.has_memory_size()) {
      set_memory_size(from.memory_size());
    }
    if (from.has_storage_size()) {
      set_storage_size(from.storage_size());
    }
    if (from.has_virtual_size()) {
      set_virtual_size(from.virtual_size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CreateSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipc_protocol.CreateSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSessionRequest::CopyFrom(const CreateSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc_protocol.CreateSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSessionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_hdr()) {
    if (!this->hdr_->IsInitialized()) return false;
  }
  return true;
}

void CreateSessionRequest::Swap(CreateSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateSessionRequest::InternalSwap(CreateSessionRequest* other) {
  std::swap(hdr_, other->hdr_);
  std::swap(session_type_, other->session_type_);
  slab_id_.Swap(&other->slab_id_);
  std::swap(memory_size_, other->memory_size_);
  std::swap(storage_size_, other->storage_size_);
  std::swap(virtual_size_, other->virtual_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateSessionRequest_descriptor_;
  metadata.reflection = CreateSessionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateSessionRequest

// required .ipc_protocol.Header hdr = 1;
bool CreateSessionRequest::has_hdr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateSessionRequest::set_has_hdr() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateSessionRequest::clear_has_hdr() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateSessionRequest::clear_hdr() {
  if (hdr_ != NULL) hdr_->::ipc_protocol::Header::Clear();
  clear_has_hdr();
}
const ::ipc_protocol::Header& CreateSessionRequest::hdr() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionRequest.hdr)
  return hdr_ != NULL ? *hdr_ : *default_instance_->hdr_;
}
::ipc_protocol::Header* CreateSessionRequest::mutable_hdr() {
  set_has_hdr();
  if (hdr_ == NULL) {
    hdr_ = new ::ipc_protocol::Header;
  }
  // @@protoc_insertion_point(field_mutable:ipc_protocol.CreateSessionRequest.hdr)
  return hdr_;
}
::ipc_protocol::Header* CreateSessionRequest::release_hdr() {
  // @@protoc_insertion_point(field_release:ipc_protocol.CreateSessionRequest.hdr)
  clear_has_hdr();
  ::ipc_protocol::Header* temp = hdr_;
  hdr_ = NULL;
  return temp;
}
void CreateSessionRequest::set_allocated_hdr(::ipc_protocol::Header* hdr) {
  delete hdr_;
  hdr_ = hdr;
  if (hdr) {
    set_has_hdr();
  } else {
    clear_has_hdr();
  }
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.CreateSessionRequest.hdr)
}

// required .ipc_protocol.SessionType session_type = 2;
bool CreateSessionRequest::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreateSessionRequest::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CreateSessionRequest::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreateSessionRequest::clear_session_type() {
  session_type_ = 2;
  clear_has_session_type();
}
 ::ipc_protocol::SessionType CreateSessionRequest::session_type() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionRequest.session_type)
  return static_cast< ::ipc_protocol::SessionType >(session_type_);
}
 void CreateSessionRequest::set_session_type(::ipc_protocol::SessionType value) {
  assert(::ipc_protocol::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionRequest.session_type)
}

// optional string slab_id = 3;
bool CreateSessionRequest::has_slab_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CreateSessionRequest::set_has_slab_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CreateSessionRequest::clear_has_slab_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CreateSessionRequest::clear_slab_id() {
  slab_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_slab_id();
}
 const ::std::string& CreateSessionRequest::slab_id() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionRequest.slab_id)
  return slab_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateSessionRequest::set_slab_id(const ::std::string& value) {
  set_has_slab_id();
  slab_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionRequest.slab_id)
}
 void CreateSessionRequest::set_slab_id(const char* value) {
  set_has_slab_id();
  slab_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc_protocol.CreateSessionRequest.slab_id)
}
 void CreateSessionRequest::set_slab_id(const char* value, size_t size) {
  set_has_slab_id();
  slab_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc_protocol.CreateSessionRequest.slab_id)
}
 ::std::string* CreateSessionRequest::mutable_slab_id() {
  set_has_slab_id();
  // @@protoc_insertion_point(field_mutable:ipc_protocol.CreateSessionRequest.slab_id)
  return slab_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateSessionRequest::release_slab_id() {
  // @@protoc_insertion_point(field_release:ipc_protocol.CreateSessionRequest.slab_id)
  clear_has_slab_id();
  return slab_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateSessionRequest::set_allocated_slab_id(::std::string* slab_id) {
  if (slab_id != NULL) {
    set_has_slab_id();
  } else {
    clear_has_slab_id();
  }
  slab_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slab_id);
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.CreateSessionRequest.slab_id)
}

// optional uint64 memory_size = 4;
bool CreateSessionRequest::has_memory_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CreateSessionRequest::set_has_memory_size() {
  _has_bits_[0] |= 0x00000008u;
}
void CreateSessionRequest::clear_has_memory_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void CreateSessionRequest::clear_memory_size() {
  memory_size_ = GOOGLE_ULONGLONG(0);
  clear_has_memory_size();
}
 ::google::protobuf::uint64 CreateSessionRequest::memory_size() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionRequest.memory_size)
  return memory_size_;
}
 void CreateSessionRequest::set_memory_size(::google::protobuf::uint64 value) {
  set_has_memory_size();
  memory_size_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionRequest.memory_size)
}

// optional uint64 storage_size = 5;
bool CreateSessionRequest::has_storage_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CreateSessionRequest::set_has_storage_size() {
  _has_bits_[0] |= 0x00000010u;
}
void CreateSessionRequest::clear_has_storage_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void CreateSessionRequest::clear_storage_size() {
  storage_size_ = GOOGLE_ULONGLONG(0);
  clear_has_storage_size();
}
 ::google::protobuf::uint64 CreateSessionRequest::storage_size() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionRequest.storage_size)
  return storage_size_;
}
 void CreateSessionRequest::set_storage_size(::google::protobuf::uint64 value) {
  set_has_storage_size();
  storage_size_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionRequest.storage_size)
}

// optional uint64 virtual_size = 6;
bool CreateSessionRequest::has_virtual_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CreateSessionRequest::set_has_virtual_size() {
  _has_bits_[0] |= 0x00000020u;
}
void CreateSessionRequest::clear_has_virtual_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void CreateSessionRequest::clear_virtual_size() {
  virtual_size_ = GOOGLE_ULONGLONG(0);
  clear_has_virtual_size();
}
 ::google::protobuf::uint64 CreateSessionRequest::virtual_size() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionRequest.virtual_size)
  return virtual_size_;
}
 void CreateSessionRequest::set_virtual_size(::google::protobuf::uint64 value) {
  set_has_virtual_size();
  virtual_size_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionRequest.virtual_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateSessionReply::kHdrFieldNumber;
const int CreateSessionReply::kStatusFieldNumber;
const int CreateSessionReply::kSessionIdFieldNumber;
const int CreateSessionReply::kPhysAddrFieldNumber;
const int CreateSessionReply::kVirtAddrFieldNumber;
const int CreateSessionReply::kStorageAddrFieldNumber;
const int CreateSessionReply::kFoobarFieldNumber;
const int CreateSessionReply::kReconstructedFieldNumber;
const int CreateSessionReply::kPhysSizeFieldNumber;
const int CreateSessionReply::kPathFieldNumber;
const int CreateSessionReply::kOffsetFieldNumber;
const int CreateSessionReply::kBlockSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSessionReply::CreateSessionReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc_protocol.CreateSessionReply)
}

void CreateSessionReply::InitAsDefaultInstance() {
  hdr_ = const_cast< ::ipc_protocol::Header*>(&::ipc_protocol::Header::default_instance());
}

CreateSessionReply::CreateSessionReply(const CreateSessionReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ipc_protocol.CreateSessionReply)
}

void CreateSessionReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hdr_ = NULL;
  status_ = GOOGLE_LONGLONG(0);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phys_addr_ = GOOGLE_ULONGLONG(0);
  virt_addr_ = GOOGLE_ULONGLONG(0);
  storage_addr_ = GOOGLE_ULONGLONG(0);
  foobar_ = 0u;
  reconstructed_ = false;
  phys_size_ = GOOGLE_ULONGLONG(0);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = GOOGLE_ULONGLONG(0);
  block_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateSessionReply::~CreateSessionReply() {
  // @@protoc_insertion_point(destructor:ipc_protocol.CreateSessionReply)
  SharedDtor();
}

void CreateSessionReply::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete hdr_;
  }
}

void CreateSessionReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSessionReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateSessionReply_descriptor_;
}

const CreateSessionReply& CreateSessionReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

CreateSessionReply* CreateSessionReply::default_instance_ = NULL;

CreateSessionReply* CreateSessionReply::New(::google::protobuf::Arena* arena) const {
  CreateSessionReply* n = new CreateSessionReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateSessionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc_protocol.CreateSessionReply)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CreateSessionReply, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CreateSessionReply*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(phys_addr_, reconstructed_);
    if (has_hdr()) {
      if (hdr_ != NULL) hdr_->::ipc_protocol::Header::Clear();
    }
    status_ = GOOGLE_LONGLONG(0);
    if (has_session_id()) {
      session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ZR_(offset_, block_size_);
    phys_size_ = GOOGLE_ULONGLONG(0);
    if (has_path()) {
      path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CreateSessionReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ipc_protocol.CreateSessionReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ipc_protocol.Header hdr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int64 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_session_id;
        break;
      }

      // required string session_id = 3;
      case 3: {
        if (tag == 26) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ipc_protocol.CreateSessionReply.session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_phys_addr;
        break;
      }

      // optional fixed64 phys_addr = 4;
      case 4: {
        if (tag == 33) {
         parse_phys_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &phys_addr_)));
          set_has_phys_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_virt_addr;
        break;
      }

      // optional fixed64 virt_addr = 5;
      case 5: {
        if (tag == 41) {
         parse_virt_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &virt_addr_)));
          set_has_virt_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_storage_addr;
        break;
      }

      // optional fixed64 storage_addr = 6;
      case 6: {
        if (tag == 49) {
         parse_storage_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &storage_addr_)));
          set_has_storage_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_foobar;
        break;
      }

      // optional fixed32 foobar = 7;
      case 7: {
        if (tag == 61) {
         parse_foobar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &foobar_)));
          set_has_foobar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_reconstructed;
        break;
      }

      // optional bool reconstructed = 8;
      case 8: {
        if (tag == 64) {
         parse_reconstructed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reconstructed_)));
          set_has_reconstructed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_phys_size;
        break;
      }

      // optional uint64 phys_size = 9;
      case 9: {
        if (tag == 72) {
         parse_phys_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phys_size_)));
          set_has_phys_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_path;
        break;
      }

      // optional string path = 10;
      case 10: {
        if (tag == 82) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ipc_protocol.CreateSessionReply.path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_offset;
        break;
      }

      // optional uint64 offset = 11;
      case 11: {
        if (tag == 88) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_block_size;
        break;
      }

      // optional uint32 block_size = 12;
      case 12: {
        if (tag == 96) {
         parse_block_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_size_)));
          set_has_block_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc_protocol.CreateSessionReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc_protocol.CreateSessionReply)
  return false;
#undef DO_
}

void CreateSessionReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc_protocol.CreateSessionReply)
  // required .ipc_protocol.Header hdr = 1;
  if (has_hdr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hdr_, output);
  }

  // required int64 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->status(), output);
  }

  // required string session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipc_protocol.CreateSessionReply.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session_id(), output);
  }

  // optional fixed64 phys_addr = 4;
  if (has_phys_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->phys_addr(), output);
  }

  // optional fixed64 virt_addr = 5;
  if (has_virt_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->virt_addr(), output);
  }

  // optional fixed64 storage_addr = 6;
  if (has_storage_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->storage_addr(), output);
  }

  // optional fixed32 foobar = 7;
  if (has_foobar()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->foobar(), output);
  }

  // optional bool reconstructed = 8;
  if (has_reconstructed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->reconstructed(), output);
  }

  // optional uint64 phys_size = 9;
  if (has_phys_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->phys_size(), output);
  }

  // optional string path = 10;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipc_protocol.CreateSessionReply.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->path(), output);
  }

  // optional uint64 offset = 11;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->offset(), output);
  }

  // optional uint32 block_size = 12;
  if (has_block_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->block_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ipc_protocol.CreateSessionReply)
}

::google::protobuf::uint8* CreateSessionReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipc_protocol.CreateSessionReply)
  // required .ipc_protocol.Header hdr = 1;
  if (has_hdr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->hdr_, false, target);
  }

  // required int64 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->status(), target);
  }

  // required string session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipc_protocol.CreateSessionReply.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_id(), target);
  }

  // optional fixed64 phys_addr = 4;
  if (has_phys_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->phys_addr(), target);
  }

  // optional fixed64 virt_addr = 5;
  if (has_virt_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->virt_addr(), target);
  }

  // optional fixed64 storage_addr = 6;
  if (has_storage_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->storage_addr(), target);
  }

  // optional fixed32 foobar = 7;
  if (has_foobar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->foobar(), target);
  }

  // optional bool reconstructed = 8;
  if (has_reconstructed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->reconstructed(), target);
  }

  // optional uint64 phys_size = 9;
  if (has_phys_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->phys_size(), target);
  }

  // optional string path = 10;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipc_protocol.CreateSessionReply.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->path(), target);
  }

  // optional uint64 offset = 11;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->offset(), target);
  }

  // optional uint32 block_size = 12;
  if (has_block_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->block_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipc_protocol.CreateSessionReply)
  return target;
}

int CreateSessionReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ipc_protocol.CreateSessionReply)
  int total_size = 0;

  if (has_hdr()) {
    // required .ipc_protocol.Header hdr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hdr_);
  }

  if (has_status()) {
    // required int64 status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->status());
  }

  if (has_session_id()) {
    // required string session_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  return total_size;
}
int CreateSessionReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ipc_protocol.CreateSessionReply)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .ipc_protocol.Header hdr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hdr_);

    // required int64 status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->status());

    // required string session_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 248u) {
    // optional fixed64 phys_addr = 4;
    if (has_phys_addr()) {
      total_size += 1 + 8;
    }

    // optional fixed64 virt_addr = 5;
    if (has_virt_addr()) {
      total_size += 1 + 8;
    }

    // optional fixed64 storage_addr = 6;
    if (has_storage_addr()) {
      total_size += 1 + 8;
    }

    // optional fixed32 foobar = 7;
    if (has_foobar()) {
      total_size += 1 + 4;
    }

    // optional bool reconstructed = 8;
    if (has_reconstructed()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint64 phys_size = 9;
    if (has_phys_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phys_size());
    }

    // optional string path = 10;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional uint64 offset = 11;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }

    // optional uint32 block_size = 12;
    if (has_block_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->block_size());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSessionReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipc_protocol.CreateSessionReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateSessionReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateSessionReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipc_protocol.CreateSessionReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipc_protocol.CreateSessionReply)
    MergeFrom(*source);
  }
}

void CreateSessionReply::MergeFrom(const CreateSessionReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc_protocol.CreateSessionReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hdr()) {
      mutable_hdr()->::ipc_protocol::Header::MergeFrom(from.hdr());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_session_id()) {
      set_has_session_id();
      session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (from.has_phys_addr()) {
      set_phys_addr(from.phys_addr());
    }
    if (from.has_virt_addr()) {
      set_virt_addr(from.virt_addr());
    }
    if (from.has_storage_addr()) {
      set_storage_addr(from.storage_addr());
    }
    if (from.has_foobar()) {
      set_foobar(from.foobar());
    }
    if (from.has_reconstructed()) {
      set_reconstructed(from.reconstructed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_phys_size()) {
      set_phys_size(from.phys_size());
    }
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_block_size()) {
      set_block_size(from.block_size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CreateSessionReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipc_protocol.CreateSessionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSessionReply::CopyFrom(const CreateSessionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc_protocol.CreateSessionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSessionReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_hdr()) {
    if (!this->hdr_->IsInitialized()) return false;
  }
  return true;
}

void CreateSessionReply::Swap(CreateSessionReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateSessionReply::InternalSwap(CreateSessionReply* other) {
  std::swap(hdr_, other->hdr_);
  std::swap(status_, other->status_);
  session_id_.Swap(&other->session_id_);
  std::swap(phys_addr_, other->phys_addr_);
  std::swap(virt_addr_, other->virt_addr_);
  std::swap(storage_addr_, other->storage_addr_);
  std::swap(foobar_, other->foobar_);
  std::swap(reconstructed_, other->reconstructed_);
  std::swap(phys_size_, other->phys_size_);
  path_.Swap(&other->path_);
  std::swap(offset_, other->offset_);
  std::swap(block_size_, other->block_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSessionReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateSessionReply_descriptor_;
  metadata.reflection = CreateSessionReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateSessionReply

// required .ipc_protocol.Header hdr = 1;
bool CreateSessionReply::has_hdr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateSessionReply::set_has_hdr() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateSessionReply::clear_has_hdr() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateSessionReply::clear_hdr() {
  if (hdr_ != NULL) hdr_->::ipc_protocol::Header::Clear();
  clear_has_hdr();
}
const ::ipc_protocol::Header& CreateSessionReply::hdr() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.hdr)
  return hdr_ != NULL ? *hdr_ : *default_instance_->hdr_;
}
::ipc_protocol::Header* CreateSessionReply::mutable_hdr() {
  set_has_hdr();
  if (hdr_ == NULL) {
    hdr_ = new ::ipc_protocol::Header;
  }
  // @@protoc_insertion_point(field_mutable:ipc_protocol.CreateSessionReply.hdr)
  return hdr_;
}
::ipc_protocol::Header* CreateSessionReply::release_hdr() {
  // @@protoc_insertion_point(field_release:ipc_protocol.CreateSessionReply.hdr)
  clear_has_hdr();
  ::ipc_protocol::Header* temp = hdr_;
  hdr_ = NULL;
  return temp;
}
void CreateSessionReply::set_allocated_hdr(::ipc_protocol::Header* hdr) {
  delete hdr_;
  hdr_ = hdr;
  if (hdr) {
    set_has_hdr();
  } else {
    clear_has_hdr();
  }
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.CreateSessionReply.hdr)
}

// required int64 status = 2;
bool CreateSessionReply::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreateSessionReply::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void CreateSessionReply::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreateSessionReply::clear_status() {
  status_ = GOOGLE_LONGLONG(0);
  clear_has_status();
}
 ::google::protobuf::int64 CreateSessionReply::status() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.status)
  return status_;
}
 void CreateSessionReply::set_status(::google::protobuf::int64 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.status)
}

// required string session_id = 3;
bool CreateSessionReply::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CreateSessionReply::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CreateSessionReply::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CreateSessionReply::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_id();
}
 const ::std::string& CreateSessionReply::session_id() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateSessionReply::set_session_id(const ::std::string& value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.session_id)
}
 void CreateSessionReply::set_session_id(const char* value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc_protocol.CreateSessionReply.session_id)
}
 void CreateSessionReply::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc_protocol.CreateSessionReply.session_id)
}
 ::std::string* CreateSessionReply::mutable_session_id() {
  set_has_session_id();
  // @@protoc_insertion_point(field_mutable:ipc_protocol.CreateSessionReply.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateSessionReply::release_session_id() {
  // @@protoc_insertion_point(field_release:ipc_protocol.CreateSessionReply.session_id)
  clear_has_session_id();
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateSessionReply::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.CreateSessionReply.session_id)
}

// optional fixed64 phys_addr = 4;
bool CreateSessionReply::has_phys_addr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CreateSessionReply::set_has_phys_addr() {
  _has_bits_[0] |= 0x00000008u;
}
void CreateSessionReply::clear_has_phys_addr() {
  _has_bits_[0] &= ~0x00000008u;
}
void CreateSessionReply::clear_phys_addr() {
  phys_addr_ = GOOGLE_ULONGLONG(0);
  clear_has_phys_addr();
}
 ::google::protobuf::uint64 CreateSessionReply::phys_addr() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.phys_addr)
  return phys_addr_;
}
 void CreateSessionReply::set_phys_addr(::google::protobuf::uint64 value) {
  set_has_phys_addr();
  phys_addr_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.phys_addr)
}

// optional fixed64 virt_addr = 5;
bool CreateSessionReply::has_virt_addr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CreateSessionReply::set_has_virt_addr() {
  _has_bits_[0] |= 0x00000010u;
}
void CreateSessionReply::clear_has_virt_addr() {
  _has_bits_[0] &= ~0x00000010u;
}
void CreateSessionReply::clear_virt_addr() {
  virt_addr_ = GOOGLE_ULONGLONG(0);
  clear_has_virt_addr();
}
 ::google::protobuf::uint64 CreateSessionReply::virt_addr() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.virt_addr)
  return virt_addr_;
}
 void CreateSessionReply::set_virt_addr(::google::protobuf::uint64 value) {
  set_has_virt_addr();
  virt_addr_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.virt_addr)
}

// optional fixed64 storage_addr = 6;
bool CreateSessionReply::has_storage_addr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CreateSessionReply::set_has_storage_addr() {
  _has_bits_[0] |= 0x00000020u;
}
void CreateSessionReply::clear_has_storage_addr() {
  _has_bits_[0] &= ~0x00000020u;
}
void CreateSessionReply::clear_storage_addr() {
  storage_addr_ = GOOGLE_ULONGLONG(0);
  clear_has_storage_addr();
}
 ::google::protobuf::uint64 CreateSessionReply::storage_addr() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.storage_addr)
  return storage_addr_;
}
 void CreateSessionReply::set_storage_addr(::google::protobuf::uint64 value) {
  set_has_storage_addr();
  storage_addr_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.storage_addr)
}

// optional fixed32 foobar = 7;
bool CreateSessionReply::has_foobar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CreateSessionReply::set_has_foobar() {
  _has_bits_[0] |= 0x00000040u;
}
void CreateSessionReply::clear_has_foobar() {
  _has_bits_[0] &= ~0x00000040u;
}
void CreateSessionReply::clear_foobar() {
  foobar_ = 0u;
  clear_has_foobar();
}
 ::google::protobuf::uint32 CreateSessionReply::foobar() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.foobar)
  return foobar_;
}
 void CreateSessionReply::set_foobar(::google::protobuf::uint32 value) {
  set_has_foobar();
  foobar_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.foobar)
}

// optional bool reconstructed = 8;
bool CreateSessionReply::has_reconstructed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CreateSessionReply::set_has_reconstructed() {
  _has_bits_[0] |= 0x00000080u;
}
void CreateSessionReply::clear_has_reconstructed() {
  _has_bits_[0] &= ~0x00000080u;
}
void CreateSessionReply::clear_reconstructed() {
  reconstructed_ = false;
  clear_has_reconstructed();
}
 bool CreateSessionReply::reconstructed() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.reconstructed)
  return reconstructed_;
}
 void CreateSessionReply::set_reconstructed(bool value) {
  set_has_reconstructed();
  reconstructed_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.reconstructed)
}

// optional uint64 phys_size = 9;
bool CreateSessionReply::has_phys_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CreateSessionReply::set_has_phys_size() {
  _has_bits_[0] |= 0x00000100u;
}
void CreateSessionReply::clear_has_phys_size() {
  _has_bits_[0] &= ~0x00000100u;
}
void CreateSessionReply::clear_phys_size() {
  phys_size_ = GOOGLE_ULONGLONG(0);
  clear_has_phys_size();
}
 ::google::protobuf::uint64 CreateSessionReply::phys_size() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.phys_size)
  return phys_size_;
}
 void CreateSessionReply::set_phys_size(::google::protobuf::uint64 value) {
  set_has_phys_size();
  phys_size_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.phys_size)
}

// optional string path = 10;
bool CreateSessionReply::has_path() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CreateSessionReply::set_has_path() {
  _has_bits_[0] |= 0x00000200u;
}
void CreateSessionReply::clear_has_path() {
  _has_bits_[0] &= ~0x00000200u;
}
void CreateSessionReply::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
 const ::std::string& CreateSessionReply::path() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateSessionReply::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.path)
}
 void CreateSessionReply::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc_protocol.CreateSessionReply.path)
}
 void CreateSessionReply::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc_protocol.CreateSessionReply.path)
}
 ::std::string* CreateSessionReply::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:ipc_protocol.CreateSessionReply.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateSessionReply::release_path() {
  // @@protoc_insertion_point(field_release:ipc_protocol.CreateSessionReply.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateSessionReply::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.CreateSessionReply.path)
}

// optional uint64 offset = 11;
bool CreateSessionReply::has_offset() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CreateSessionReply::set_has_offset() {
  _has_bits_[0] |= 0x00000400u;
}
void CreateSessionReply::clear_has_offset() {
  _has_bits_[0] &= ~0x00000400u;
}
void CreateSessionReply::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
 ::google::protobuf::uint64 CreateSessionReply::offset() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.offset)
  return offset_;
}
 void CreateSessionReply::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.offset)
}

// optional uint32 block_size = 12;
bool CreateSessionReply::has_block_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CreateSessionReply::set_has_block_size() {
  _has_bits_[0] |= 0x00000800u;
}
void CreateSessionReply::clear_has_block_size() {
  _has_bits_[0] &= ~0x00000800u;
}
void CreateSessionReply::clear_block_size() {
  block_size_ = 0u;
  clear_has_block_size();
}
 ::google::protobuf::uint32 CreateSessionReply::block_size() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.block_size)
  return block_size_;
}
 void CreateSessionReply::set_block_size(::google::protobuf::uint32 value) {
  set_has_block_size();
  block_size_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.block_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShutdownSession::kHdrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShutdownSession::ShutdownSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc_protocol.ShutdownSession)
}

void ShutdownSession::InitAsDefaultInstance() {
  hdr_ = const_cast< ::ipc_protocol::Header*>(&::ipc_protocol::Header::default_instance());
}

ShutdownSession::ShutdownSession(const ShutdownSession& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ipc_protocol.ShutdownSession)
}

void ShutdownSession::SharedCtor() {
  _cached_size_ = 0;
  hdr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShutdownSession::~ShutdownSession() {
  // @@protoc_insertion_point(destructor:ipc_protocol.ShutdownSession)
  SharedDtor();
}

void ShutdownSession::SharedDtor() {
  if (this != default_instance_) {
    delete hdr_;
  }
}

void ShutdownSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutdownSession_descriptor_;
}

const ShutdownSession& ShutdownSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

ShutdownSession* ShutdownSession::default_instance_ = NULL;

ShutdownSession* ShutdownSession::New(::google::protobuf::Arena* arena) const {
  ShutdownSession* n = new ShutdownSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShutdownSession::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc_protocol.ShutdownSession)
  if (has_hdr()) {
    if (hdr_ != NULL) hdr_->::ipc_protocol::Header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ShutdownSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ipc_protocol.ShutdownSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ipc_protocol.Header hdr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc_protocol.ShutdownSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc_protocol.ShutdownSession)
  return false;
#undef DO_
}

void ShutdownSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc_protocol.ShutdownSession)
  // required .ipc_protocol.Header hdr = 1;
  if (has_hdr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hdr_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ipc_protocol.ShutdownSession)
}

::google::protobuf::uint8* ShutdownSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipc_protocol.ShutdownSession)
  // required .ipc_protocol.Header hdr = 1;
  if (has_hdr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->hdr_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipc_protocol.ShutdownSession)
  return target;
}

int ShutdownSession::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ipc_protocol.ShutdownSession)
  int total_size = 0;

  // required .ipc_protocol.Header hdr = 1;
  if (has_hdr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hdr_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipc_protocol.ShutdownSession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ShutdownSession* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ShutdownSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipc_protocol.ShutdownSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipc_protocol.ShutdownSession)
    MergeFrom(*source);
  }
}

void ShutdownSession::MergeFrom(const ShutdownSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc_protocol.ShutdownSession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hdr()) {
      mutable_hdr()->::ipc_protocol::Header::MergeFrom(from.hdr());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ShutdownSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipc_protocol.ShutdownSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownSession::CopyFrom(const ShutdownSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc_protocol.ShutdownSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownSession::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_hdr()) {
    if (!this->hdr_->IsInitialized()) return false;
  }
  return true;
}

void ShutdownSession::Swap(ShutdownSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShutdownSession::InternalSwap(ShutdownSession* other) {
  std::swap(hdr_, other->hdr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShutdownSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutdownSession_descriptor_;
  metadata.reflection = ShutdownSession_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShutdownSession

// required .ipc_protocol.Header hdr = 1;
bool ShutdownSession::has_hdr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShutdownSession::set_has_hdr() {
  _has_bits_[0] |= 0x00000001u;
}
void ShutdownSession::clear_has_hdr() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShutdownSession::clear_hdr() {
  if (hdr_ != NULL) hdr_->::ipc_protocol::Header::Clear();
  clear_has_hdr();
}
const ::ipc_protocol::Header& ShutdownSession::hdr() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.ShutdownSession.hdr)
  return hdr_ != NULL ? *hdr_ : *default_instance_->hdr_;
}
::ipc_protocol::Header* ShutdownSession::mutable_hdr() {
  set_has_hdr();
  if (hdr_ == NULL) {
    hdr_ = new ::ipc_protocol::Header;
  }
  // @@protoc_insertion_point(field_mutable:ipc_protocol.ShutdownSession.hdr)
  return hdr_;
}
::ipc_protocol::Header* ShutdownSession::release_hdr() {
  // @@protoc_insertion_point(field_release:ipc_protocol.ShutdownSession.hdr)
  clear_has_hdr();
  ::ipc_protocol::Header* temp = hdr_;
  hdr_ = NULL;
  return temp;
}
void ShutdownSession::set_allocated_hdr(::ipc_protocol::Header* hdr) {
  delete hdr_;
  hdr_ = hdr;
  if (hdr) {
    set_has_hdr();
  } else {
    clear_has_hdr();
  }
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.ShutdownSession.hdr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReleaseSessionRequest::kHdrFieldNumber;
const int ReleaseSessionRequest::kSessionTypeFieldNumber;
const int ReleaseSessionRequest::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReleaseSessionRequest::ReleaseSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc_protocol.ReleaseSessionRequest)
}

void ReleaseSessionRequest::InitAsDefaultInstance() {
  hdr_ = const_cast< ::ipc_protocol::Header*>(&::ipc_protocol::Header::default_instance());
}

ReleaseSessionRequest::ReleaseSessionRequest(const ReleaseSessionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ipc_protocol.ReleaseSessionRequest)
}

void ReleaseSessionRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hdr_ = NULL;
  session_type_ = 2;
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReleaseSessionRequest::~ReleaseSessionRequest() {
  // @@protoc_insertion_point(destructor:ipc_protocol.ReleaseSessionRequest)
  SharedDtor();
}

void ReleaseSessionRequest::SharedDtor() {
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete hdr_;
  }
}

void ReleaseSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReleaseSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReleaseSessionRequest_descriptor_;
}

const ReleaseSessionRequest& ReleaseSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

ReleaseSessionRequest* ReleaseSessionRequest::default_instance_ = NULL;

ReleaseSessionRequest* ReleaseSessionRequest::New(::google::protobuf::Arena* arena) const {
  ReleaseSessionRequest* n = new ReleaseSessionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReleaseSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc_protocol.ReleaseSessionRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_hdr()) {
      if (hdr_ != NULL) hdr_->::ipc_protocol::Header::Clear();
    }
    session_type_ = 2;
    if (has_session_id()) {
      session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReleaseSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ipc_protocol.ReleaseSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ipc_protocol.Header hdr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .ipc_protocol.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ipc_protocol::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::ipc_protocol::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_session_id;
        break;
      }

      // required string session_id = 3;
      case 3: {
        if (tag == 26) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ipc_protocol.ReleaseSessionRequest.session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc_protocol.ReleaseSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc_protocol.ReleaseSessionRequest)
  return false;
#undef DO_
}

void ReleaseSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc_protocol.ReleaseSessionRequest)
  // required .ipc_protocol.Header hdr = 1;
  if (has_hdr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hdr_, output);
  }

  // required .ipc_protocol.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required string session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipc_protocol.ReleaseSessionRequest.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ipc_protocol.ReleaseSessionRequest)
}

::google::protobuf::uint8* ReleaseSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipc_protocol.ReleaseSessionRequest)
  // required .ipc_protocol.Header hdr = 1;
  if (has_hdr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->hdr_, false, target);
  }

  // required .ipc_protocol.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // required string session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipc_protocol.ReleaseSessionRequest.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipc_protocol.ReleaseSessionRequest)
  return target;
}

int ReleaseSessionRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ipc_protocol.ReleaseSessionRequest)
  int total_size = 0;

  if (has_hdr()) {
    // required .ipc_protocol.Header hdr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hdr_);
  }

  if (has_session_type()) {
    // required .ipc_protocol.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  if (has_session_id()) {
    // required string session_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  return total_size;
}
int ReleaseSessionRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ipc_protocol.ReleaseSessionRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .ipc_protocol.Header hdr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hdr_);

    // required .ipc_protocol.SessionType session_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());

    // required string session_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReleaseSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipc_protocol.ReleaseSessionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReleaseSessionRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReleaseSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipc_protocol.ReleaseSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipc_protocol.ReleaseSessionRequest)
    MergeFrom(*source);
  }
}

void ReleaseSessionRequest::MergeFrom(const ReleaseSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc_protocol.ReleaseSessionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hdr()) {
      mutable_hdr()->::ipc_protocol::Header::MergeFrom(from.hdr());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_has_session_id();
      session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReleaseSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipc_protocol.ReleaseSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseSessionRequest::CopyFrom(const ReleaseSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc_protocol.ReleaseSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseSessionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_hdr()) {
    if (!this->hdr_->IsInitialized()) return false;
  }
  return true;
}

void ReleaseSessionRequest::Swap(ReleaseSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReleaseSessionRequest::InternalSwap(ReleaseSessionRequest* other) {
  std::swap(hdr_, other->hdr_);
  std::swap(session_type_, other->session_type_);
  session_id_.Swap(&other->session_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReleaseSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReleaseSessionRequest_descriptor_;
  metadata.reflection = ReleaseSessionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReleaseSessionRequest

// required .ipc_protocol.Header hdr = 1;
bool ReleaseSessionRequest::has_hdr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReleaseSessionRequest::set_has_hdr() {
  _has_bits_[0] |= 0x00000001u;
}
void ReleaseSessionRequest::clear_has_hdr() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReleaseSessionRequest::clear_hdr() {
  if (hdr_ != NULL) hdr_->::ipc_protocol::Header::Clear();
  clear_has_hdr();
}
const ::ipc_protocol::Header& ReleaseSessionRequest::hdr() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.ReleaseSessionRequest.hdr)
  return hdr_ != NULL ? *hdr_ : *default_instance_->hdr_;
}
::ipc_protocol::Header* ReleaseSessionRequest::mutable_hdr() {
  set_has_hdr();
  if (hdr_ == NULL) {
    hdr_ = new ::ipc_protocol::Header;
  }
  // @@protoc_insertion_point(field_mutable:ipc_protocol.ReleaseSessionRequest.hdr)
  return hdr_;
}
::ipc_protocol::Header* ReleaseSessionRequest::release_hdr() {
  // @@protoc_insertion_point(field_release:ipc_protocol.ReleaseSessionRequest.hdr)
  clear_has_hdr();
  ::ipc_protocol::Header* temp = hdr_;
  hdr_ = NULL;
  return temp;
}
void ReleaseSessionRequest::set_allocated_hdr(::ipc_protocol::Header* hdr) {
  delete hdr_;
  hdr_ = hdr;
  if (hdr) {
    set_has_hdr();
  } else {
    clear_has_hdr();
  }
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.ReleaseSessionRequest.hdr)
}

// required .ipc_protocol.SessionType session_type = 2;
bool ReleaseSessionRequest::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReleaseSessionRequest::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ReleaseSessionRequest::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReleaseSessionRequest::clear_session_type() {
  session_type_ = 2;
  clear_has_session_type();
}
 ::ipc_protocol::SessionType ReleaseSessionRequest::session_type() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.ReleaseSessionRequest.session_type)
  return static_cast< ::ipc_protocol::SessionType >(session_type_);
}
 void ReleaseSessionRequest::set_session_type(::ipc_protocol::SessionType value) {
  assert(::ipc_protocol::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.ReleaseSessionRequest.session_type)
}

// required string session_id = 3;
bool ReleaseSessionRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReleaseSessionRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ReleaseSessionRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReleaseSessionRequest::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_id();
}
 const ::std::string& ReleaseSessionRequest::session_id() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.ReleaseSessionRequest.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReleaseSessionRequest::set_session_id(const ::std::string& value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc_protocol.ReleaseSessionRequest.session_id)
}
 void ReleaseSessionRequest::set_session_id(const char* value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc_protocol.ReleaseSessionRequest.session_id)
}
 void ReleaseSessionRequest::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc_protocol.ReleaseSessionRequest.session_id)
}
 ::std::string* ReleaseSessionRequest::mutable_session_id() {
  set_has_session_id();
  // @@protoc_insertion_point(field_mutable:ipc_protocol.ReleaseSessionRequest.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReleaseSessionRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:ipc_protocol.ReleaseSessionRequest.session_id)
  clear_has_session_id();
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReleaseSessionRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.ReleaseSessionRequest.session_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocDmaMemory::kHdrFieldNumber;
const int AllocDmaMemory::kPidFieldNumber;
const int AllocDmaMemory::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocDmaMemory::AllocDmaMemory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc_protocol.AllocDmaMemory)
}

void AllocDmaMemory::InitAsDefaultInstance() {
  hdr_ = const_cast< ::ipc_protocol::Header*>(&::ipc_protocol::Header::default_instance());
}

AllocDmaMemory::AllocDmaMemory(const AllocDmaMemory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ipc_protocol.AllocDmaMemory)
}

void AllocDmaMemory::SharedCtor() {
  _cached_size_ = 0;
  hdr_ = NULL;
  pid_ = GOOGLE_ULONGLONG(0);
  size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllocDmaMemory::~AllocDmaMemory() {
  // @@protoc_insertion_point(destructor:ipc_protocol.AllocDmaMemory)
  SharedDtor();
}

void AllocDmaMemory::SharedDtor() {
  if (this != default_instance_) {
    delete hdr_;
  }
}

void AllocDmaMemory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocDmaMemory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllocDmaMemory_descriptor_;
}

const AllocDmaMemory& AllocDmaMemory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

AllocDmaMemory* AllocDmaMemory::default_instance_ = NULL;

AllocDmaMemory* AllocDmaMemory::New(::google::protobuf::Arena* arena) const {
  AllocDmaMemory* n = new AllocDmaMemory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllocDmaMemory::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc_protocol.AllocDmaMemory)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AllocDmaMemory, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AllocDmaMemory*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(pid_, size_);
    if (has_hdr()) {
      if (hdr_ != NULL) hdr_->::ipc_protocol::Header::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AllocDmaMemory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ipc_protocol.AllocDmaMemory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ipc_protocol.Header hdr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // required uint64 pid = 2;
      case 2: {
        if (tag == 16) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // required uint64 size = 3;
      case 3: {
        if (tag == 24) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc_protocol.AllocDmaMemory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc_protocol.AllocDmaMemory)
  return false;
#undef DO_
}

void AllocDmaMemory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc_protocol.AllocDmaMemory)
  // required .ipc_protocol.Header hdr = 1;
  if (has_hdr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hdr_, output);
  }

  // required uint64 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pid(), output);
  }

  // required uint64 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ipc_protocol.AllocDmaMemory)
}

::google::protobuf::uint8* AllocDmaMemory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipc_protocol.AllocDmaMemory)
  // required .ipc_protocol.Header hdr = 1;
  if (has_hdr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->hdr_, false, target);
  }

  // required uint64 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pid(), target);
  }

  // required uint64 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipc_protocol.AllocDmaMemory)
  return target;
}

int AllocDmaMemory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ipc_protocol.AllocDmaMemory)
  int total_size = 0;

  if (has_hdr()) {
    // required .ipc_protocol.Header hdr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hdr_);
  }

  if (has_pid()) {
    // required uint64 pid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pid());
  }

  if (has_size()) {
    // required uint64 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  return total_size;
}
int AllocDmaMemory::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ipc_protocol.AllocDmaMemory)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .ipc_protocol.Header hdr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hdr_);

    // required uint64 pid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pid());

    // required uint64 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocDmaMemory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipc_protocol.AllocDmaMemory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AllocDmaMemory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocDmaMemory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipc_protocol.AllocDmaMemory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipc_protocol.AllocDmaMemory)
    MergeFrom(*source);
  }
}

void AllocDmaMemory::MergeFrom(const AllocDmaMemory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc_protocol.AllocDmaMemory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hdr()) {
      mutable_hdr()->::ipc_protocol::Header::MergeFrom(from.hdr());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AllocDmaMemory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipc_protocol.AllocDmaMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocDmaMemory::CopyFrom(const AllocDmaMemory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc_protocol.AllocDmaMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocDmaMemory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_hdr()) {
    if (!this->hdr_->IsInitialized()) return false;
  }
  return true;
}

void AllocDmaMemory::Swap(AllocDmaMemory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocDmaMemory::InternalSwap(AllocDmaMemory* other) {
  std::swap(hdr_, other->hdr_);
  std::swap(pid_, other->pid_);
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllocDmaMemory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllocDmaMemory_descriptor_;
  metadata.reflection = AllocDmaMemory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllocDmaMemory

// required .ipc_protocol.Header hdr = 1;
bool AllocDmaMemory::has_hdr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AllocDmaMemory::set_has_hdr() {
  _has_bits_[0] |= 0x00000001u;
}
void AllocDmaMemory::clear_has_hdr() {
  _has_bits_[0] &= ~0x00000001u;
}
void AllocDmaMemory::clear_hdr() {
  if (hdr_ != NULL) hdr_->::ipc_protocol::Header::Clear();
  clear_has_hdr();
}
const ::ipc_protocol::Header& AllocDmaMemory::hdr() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.AllocDmaMemory.hdr)
  return hdr_ != NULL ? *hdr_ : *default_instance_->hdr_;
}
::ipc_protocol::Header* AllocDmaMemory::mutable_hdr() {
  set_has_hdr();
  if (hdr_ == NULL) {
    hdr_ = new ::ipc_protocol::Header;
  }
  // @@protoc_insertion_point(field_mutable:ipc_protocol.AllocDmaMemory.hdr)
  return hdr_;
}
::ipc_protocol::Header* AllocDmaMemory::release_hdr() {
  // @@protoc_insertion_point(field_release:ipc_protocol.AllocDmaMemory.hdr)
  clear_has_hdr();
  ::ipc_protocol::Header* temp = hdr_;
  hdr_ = NULL;
  return temp;
}
void AllocDmaMemory::set_allocated_hdr(::ipc_protocol::Header* hdr) {
  delete hdr_;
  hdr_ = hdr;
  if (hdr) {
    set_has_hdr();
  } else {
    clear_has_hdr();
  }
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.AllocDmaMemory.hdr)
}

// required uint64 pid = 2;
bool AllocDmaMemory::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AllocDmaMemory::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
void AllocDmaMemory::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AllocDmaMemory::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
 ::google::protobuf::uint64 AllocDmaMemory::pid() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.AllocDmaMemory.pid)
  return pid_;
}
 void AllocDmaMemory::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.AllocDmaMemory.pid)
}

// required uint64 size = 3;
bool AllocDmaMemory::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AllocDmaMemory::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
void AllocDmaMemory::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void AllocDmaMemory::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
 ::google::protobuf::uint64 AllocDmaMemory::size() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.AllocDmaMemory.size)
  return size_;
}
 void AllocDmaMemory::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.AllocDmaMemory.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ack::kHdrFieldNumber;
const int Ack::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ack::Ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc_protocol.Ack)
}

void Ack::InitAsDefaultInstance() {
  hdr_ = const_cast< ::ipc_protocol::Header*>(&::ipc_protocol::Header::default_instance());
}

Ack::Ack(const Ack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ipc_protocol.Ack)
}

void Ack::SharedCtor() {
  _cached_size_ = 0;
  hdr_ = NULL;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ack::~Ack() {
  // @@protoc_insertion_point(destructor:ipc_protocol.Ack)
  SharedDtor();
}

void Ack::SharedDtor() {
  if (this != default_instance_) {
    delete hdr_;
  }
}

void Ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ack_descriptor_;
}

const Ack& Ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_2eproto();
  return *default_instance_;
}

Ack* Ack::default_instance_ = NULL;

Ack* Ack::New(::google::protobuf::Arena* arena) const {
  Ack* n = new Ack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc_protocol.Ack)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_hdr()) {
      if (hdr_ != NULL) hdr_->::ipc_protocol::Header::Clear();
    }
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ipc_protocol.Ack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ipc_protocol.Header hdr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // required sint32 code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc_protocol.Ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc_protocol.Ack)
  return false;
#undef DO_
}

void Ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc_protocol.Ack)
  // required .ipc_protocol.Header hdr = 1;
  if (has_hdr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hdr_, output);
  }

  // required sint32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ipc_protocol.Ack)
}

::google::protobuf::uint8* Ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ipc_protocol.Ack)
  // required .ipc_protocol.Header hdr = 1;
  if (has_hdr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->hdr_, false, target);
  }

  // required sint32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ipc_protocol.Ack)
  return target;
}

int Ack::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ipc_protocol.Ack)
  int total_size = 0;

  if (has_hdr()) {
    // required .ipc_protocol.Header hdr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hdr_);
  }

  if (has_code()) {
    // required sint32 code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->code());
  }

  return total_size;
}
int Ack::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ipc_protocol.Ack)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ipc_protocol.Header hdr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hdr_);

    // required sint32 code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ipc_protocol.Ack)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Ack* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ipc_protocol.Ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ipc_protocol.Ack)
    MergeFrom(*source);
  }
}

void Ack::MergeFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc_protocol.Ack)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hdr()) {
      mutable_hdr()->::ipc_protocol::Header::MergeFrom(from.hdr());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ipc_protocol.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ack::CopyFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc_protocol.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_hdr()) {
    if (!this->hdr_->IsInitialized()) return false;
  }
  return true;
}

void Ack::Swap(Ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ack::InternalSwap(Ack* other) {
  std::swap(hdr_, other->hdr_);
  std::swap(code_, other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ack_descriptor_;
  metadata.reflection = Ack_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ack

// required .ipc_protocol.Header hdr = 1;
bool Ack::has_hdr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ack::set_has_hdr() {
  _has_bits_[0] |= 0x00000001u;
}
void Ack::clear_has_hdr() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ack::clear_hdr() {
  if (hdr_ != NULL) hdr_->::ipc_protocol::Header::Clear();
  clear_has_hdr();
}
const ::ipc_protocol::Header& Ack::hdr() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.Ack.hdr)
  return hdr_ != NULL ? *hdr_ : *default_instance_->hdr_;
}
::ipc_protocol::Header* Ack::mutable_hdr() {
  set_has_hdr();
  if (hdr_ == NULL) {
    hdr_ = new ::ipc_protocol::Header;
  }
  // @@protoc_insertion_point(field_mutable:ipc_protocol.Ack.hdr)
  return hdr_;
}
::ipc_protocol::Header* Ack::release_hdr() {
  // @@protoc_insertion_point(field_release:ipc_protocol.Ack.hdr)
  clear_has_hdr();
  ::ipc_protocol::Header* temp = hdr_;
  hdr_ = NULL;
  return temp;
}
void Ack::set_allocated_hdr(::ipc_protocol::Header* hdr) {
  delete hdr_;
  hdr_ = hdr;
  if (hdr) {
    set_has_hdr();
  } else {
    clear_has_hdr();
  }
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.Ack.hdr)
}

// required sint32 code = 2;
bool Ack::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ack::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void Ack::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ack::clear_code() {
  code_ = 0;
  clear_has_code();
}
 ::google::protobuf::int32 Ack::code() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.Ack.code)
  return code_;
}
 void Ack::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.Ack.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ipc_protocol

// @@protoc_insertion_point(global_scope)
