// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#ifndef PROTOBUF_service_2eproto__INCLUDED
#define PROTOBUF_service_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ipc_protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_service_2eproto();
void protobuf_AssignDesc_service_2eproto();
void protobuf_ShutdownFile_service_2eproto();

class Ack;
class CreateSessionReply;
class CreateSessionRequest;
class Header;
class ReleaseSessionRequest;
class ShutdownSession;

enum MessageType {
  __Ack = 100,
  __CreateSessionRequest = 1,
  __CreateSessionReply = 2,
  __ShutdownSessionRequest = 3,
  __ReleaseSessionRequest = 4
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = __CreateSessionRequest;
const MessageType MessageType_MAX = __Ack;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum SessionType {
  FastSharedMemoryIPC = 1,
  SharedIOSlab = 2
};
bool SessionType_IsValid(int value);
const SessionType SessionType_MIN = FastSharedMemoryIPC;
const SessionType SessionType_MAX = SharedIOSlab;
const int SessionType_ARRAYSIZE = SessionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SessionType_descriptor();
inline const ::std::string& SessionType_Name(SessionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SessionType_descriptor(), value);
}
inline bool SessionType_Parse(
    const ::std::string& name, SessionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SessionType>(
    SessionType_descriptor(), name, value);
}
// ===================================================================

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ipc_protocol.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  inline Header* New() const { return New(NULL); }

  Header* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // required string auth_id = 2;
  bool has_auth_id() const;
  void clear_auth_id();
  static const int kAuthIdFieldNumber = 2;
  const ::std::string& auth_id() const;
  void set_auth_id(const ::std::string& value);
  void set_auth_id(const char* value);
  void set_auth_id(const char* value, size_t size);
  ::std::string* mutable_auth_id();
  ::std::string* release_auth_id();
  void set_allocated_auth_id(::std::string* auth_id);

  // required string auth_token = 3;
  bool has_auth_token() const;
  void clear_auth_token();
  static const int kAuthTokenFieldNumber = 3;
  const ::std::string& auth_token() const;
  void set_auth_token(const ::std::string& value);
  void set_auth_token(const char* value);
  void set_auth_token(const char* value, size_t size);
  ::std::string* mutable_auth_token();
  ::std::string* release_auth_token();
  void set_allocated_auth_token(::std::string* auth_token);

  // optional uint32 debug_code = 4;
  bool has_debug_code() const;
  void clear_debug_code();
  static const int kDebugCodeFieldNumber = 4;
  ::google::protobuf::uint32 debug_code() const;
  void set_debug_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ipc_protocol.Header)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_auth_id();
  inline void clear_has_auth_id();
  inline void set_has_auth_token();
  inline void clear_has_auth_token();
  inline void set_has_debug_code();
  inline void clear_has_debug_code();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr auth_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 debug_code_;
  ::google::protobuf::internal::ArenaStringPtr auth_token_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class CreateSessionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ipc_protocol.CreateSessionRequest) */ {
 public:
  CreateSessionRequest();
  virtual ~CreateSessionRequest();

  CreateSessionRequest(const CreateSessionRequest& from);

  inline CreateSessionRequest& operator=(const CreateSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSessionRequest& default_instance();

  void Swap(CreateSessionRequest* other);

  // implements Message ----------------------------------------------

  inline CreateSessionRequest* New() const { return New(NULL); }

  CreateSessionRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateSessionRequest& from);
  void MergeFrom(const CreateSessionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateSessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ipc_protocol.Header hdr = 1;
  bool has_hdr() const;
  void clear_hdr();
  static const int kHdrFieldNumber = 1;
  const ::ipc_protocol::Header& hdr() const;
  ::ipc_protocol::Header* mutable_hdr();
  ::ipc_protocol::Header* release_hdr();
  void set_allocated_hdr(::ipc_protocol::Header* hdr);

  // required .ipc_protocol.SessionType session_type = 2;
  bool has_session_type() const;
  void clear_session_type();
  static const int kSessionTypeFieldNumber = 2;
  ::ipc_protocol::SessionType session_type() const;
  void set_session_type(::ipc_protocol::SessionType value);

  // optional string slab_id = 3;
  bool has_slab_id() const;
  void clear_slab_id();
  static const int kSlabIdFieldNumber = 3;
  const ::std::string& slab_id() const;
  void set_slab_id(const ::std::string& value);
  void set_slab_id(const char* value);
  void set_slab_id(const char* value, size_t size);
  ::std::string* mutable_slab_id();
  ::std::string* release_slab_id();
  void set_allocated_slab_id(::std::string* slab_id);

  // optional uint64 memory_size = 4;
  bool has_memory_size() const;
  void clear_memory_size();
  static const int kMemorySizeFieldNumber = 4;
  ::google::protobuf::uint64 memory_size() const;
  void set_memory_size(::google::protobuf::uint64 value);

  // optional uint64 storage_size = 5;
  bool has_storage_size() const;
  void clear_storage_size();
  static const int kStorageSizeFieldNumber = 5;
  ::google::protobuf::uint64 storage_size() const;
  void set_storage_size(::google::protobuf::uint64 value);

  // optional uint64 virtual_size = 6;
  bool has_virtual_size() const;
  void clear_virtual_size();
  static const int kVirtualSizeFieldNumber = 6;
  ::google::protobuf::uint64 virtual_size() const;
  void set_virtual_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ipc_protocol.CreateSessionRequest)
 private:
  inline void set_has_hdr();
  inline void clear_has_hdr();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_slab_id();
  inline void clear_has_slab_id();
  inline void set_has_memory_size();
  inline void clear_has_memory_size();
  inline void set_has_storage_size();
  inline void clear_has_storage_size();
  inline void set_has_virtual_size();
  inline void clear_has_virtual_size();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ipc_protocol::Header* hdr_;
  ::google::protobuf::internal::ArenaStringPtr slab_id_;
  ::google::protobuf::uint64 memory_size_;
  ::google::protobuf::uint64 storage_size_;
  ::google::protobuf::uint64 virtual_size_;
  int session_type_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static CreateSessionRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateSessionReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ipc_protocol.CreateSessionReply) */ {
 public:
  CreateSessionReply();
  virtual ~CreateSessionReply();

  CreateSessionReply(const CreateSessionReply& from);

  inline CreateSessionReply& operator=(const CreateSessionReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSessionReply& default_instance();

  void Swap(CreateSessionReply* other);

  // implements Message ----------------------------------------------

  inline CreateSessionReply* New() const { return New(NULL); }

  CreateSessionReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateSessionReply& from);
  void MergeFrom(const CreateSessionReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateSessionReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ipc_protocol.Header hdr = 1;
  bool has_hdr() const;
  void clear_hdr();
  static const int kHdrFieldNumber = 1;
  const ::ipc_protocol::Header& hdr() const;
  ::ipc_protocol::Header* mutable_hdr();
  ::ipc_protocol::Header* release_hdr();
  void set_allocated_hdr(::ipc_protocol::Header* hdr);

  // required int64 status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::google::protobuf::int64 status() const;
  void set_status(::google::protobuf::int64 value);

  // required string session_id = 3;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // optional fixed64 phys_addr = 4;
  bool has_phys_addr() const;
  void clear_phys_addr();
  static const int kPhysAddrFieldNumber = 4;
  ::google::protobuf::uint64 phys_addr() const;
  void set_phys_addr(::google::protobuf::uint64 value);

  // optional fixed64 virt_addr = 5;
  bool has_virt_addr() const;
  void clear_virt_addr();
  static const int kVirtAddrFieldNumber = 5;
  ::google::protobuf::uint64 virt_addr() const;
  void set_virt_addr(::google::protobuf::uint64 value);

  // optional fixed64 storage_addr = 6;
  bool has_storage_addr() const;
  void clear_storage_addr();
  static const int kStorageAddrFieldNumber = 6;
  ::google::protobuf::uint64 storage_addr() const;
  void set_storage_addr(::google::protobuf::uint64 value);

  // optional fixed32 foobar = 7;
  bool has_foobar() const;
  void clear_foobar();
  static const int kFoobarFieldNumber = 7;
  ::google::protobuf::uint32 foobar() const;
  void set_foobar(::google::protobuf::uint32 value);

  // optional bool reconstructed = 8;
  bool has_reconstructed() const;
  void clear_reconstructed();
  static const int kReconstructedFieldNumber = 8;
  bool reconstructed() const;
  void set_reconstructed(bool value);

  // optional uint64 phys_size = 9;
  bool has_phys_size() const;
  void clear_phys_size();
  static const int kPhysSizeFieldNumber = 9;
  ::google::protobuf::uint64 phys_size() const;
  void set_phys_size(::google::protobuf::uint64 value);

  // optional string path = 10;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 10;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional uint64 offset = 11;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 11;
  ::google::protobuf::uint64 offset() const;
  void set_offset(::google::protobuf::uint64 value);

  // optional uint32 block_size = 12;
  bool has_block_size() const;
  void clear_block_size();
  static const int kBlockSizeFieldNumber = 12;
  ::google::protobuf::uint32 block_size() const;
  void set_block_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ipc_protocol.CreateSessionReply)
 private:
  inline void set_has_hdr();
  inline void clear_has_hdr();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_phys_addr();
  inline void clear_has_phys_addr();
  inline void set_has_virt_addr();
  inline void clear_has_virt_addr();
  inline void set_has_storage_addr();
  inline void clear_has_storage_addr();
  inline void set_has_foobar();
  inline void clear_has_foobar();
  inline void set_has_reconstructed();
  inline void clear_has_reconstructed();
  inline void set_has_phys_size();
  inline void clear_has_phys_size();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_block_size();
  inline void clear_has_block_size();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ipc_protocol::Header* hdr_;
  ::google::protobuf::int64 status_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::uint64 phys_addr_;
  ::google::protobuf::uint64 virt_addr_;
  ::google::protobuf::uint64 storage_addr_;
  ::google::protobuf::uint32 foobar_;
  bool reconstructed_;
  ::google::protobuf::uint64 phys_size_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::uint32 block_size_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static CreateSessionReply* default_instance_;
};
// -------------------------------------------------------------------

class ShutdownSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ipc_protocol.ShutdownSession) */ {
 public:
  ShutdownSession();
  virtual ~ShutdownSession();

  ShutdownSession(const ShutdownSession& from);

  inline ShutdownSession& operator=(const ShutdownSession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShutdownSession& default_instance();

  void Swap(ShutdownSession* other);

  // implements Message ----------------------------------------------

  inline ShutdownSession* New() const { return New(NULL); }

  ShutdownSession* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShutdownSession& from);
  void MergeFrom(const ShutdownSession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShutdownSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ipc_protocol.Header hdr = 1;
  bool has_hdr() const;
  void clear_hdr();
  static const int kHdrFieldNumber = 1;
  const ::ipc_protocol::Header& hdr() const;
  ::ipc_protocol::Header* mutable_hdr();
  ::ipc_protocol::Header* release_hdr();
  void set_allocated_hdr(::ipc_protocol::Header* hdr);

  // @@protoc_insertion_point(class_scope:ipc_protocol.ShutdownSession)
 private:
  inline void set_has_hdr();
  inline void clear_has_hdr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ipc_protocol::Header* hdr_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static ShutdownSession* default_instance_;
};
// -------------------------------------------------------------------

class ReleaseSessionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ipc_protocol.ReleaseSessionRequest) */ {
 public:
  ReleaseSessionRequest();
  virtual ~ReleaseSessionRequest();

  ReleaseSessionRequest(const ReleaseSessionRequest& from);

  inline ReleaseSessionRequest& operator=(const ReleaseSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReleaseSessionRequest& default_instance();

  void Swap(ReleaseSessionRequest* other);

  // implements Message ----------------------------------------------

  inline ReleaseSessionRequest* New() const { return New(NULL); }

  ReleaseSessionRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReleaseSessionRequest& from);
  void MergeFrom(const ReleaseSessionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReleaseSessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ipc_protocol.Header hdr = 1;
  bool has_hdr() const;
  void clear_hdr();
  static const int kHdrFieldNumber = 1;
  const ::ipc_protocol::Header& hdr() const;
  ::ipc_protocol::Header* mutable_hdr();
  ::ipc_protocol::Header* release_hdr();
  void set_allocated_hdr(::ipc_protocol::Header* hdr);

  // required .ipc_protocol.SessionType session_type = 2;
  bool has_session_type() const;
  void clear_session_type();
  static const int kSessionTypeFieldNumber = 2;
  ::ipc_protocol::SessionType session_type() const;
  void set_session_type(::ipc_protocol::SessionType value);

  // required string session_id = 3;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // @@protoc_insertion_point(class_scope:ipc_protocol.ReleaseSessionRequest)
 private:
  inline void set_has_hdr();
  inline void clear_has_hdr();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_session_id();
  inline void clear_has_session_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ipc_protocol::Header* hdr_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  int session_type_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static ReleaseSessionRequest* default_instance_;
};
// -------------------------------------------------------------------

class Ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ipc_protocol.Ack) */ {
 public:
  Ack();
  virtual ~Ack();

  Ack(const Ack& from);

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ack& default_instance();

  void Swap(Ack* other);

  // implements Message ----------------------------------------------

  inline Ack* New() const { return New(NULL); }

  Ack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ack& from);
  void MergeFrom(const Ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ipc_protocol.Header hdr = 1;
  bool has_hdr() const;
  void clear_hdr();
  static const int kHdrFieldNumber = 1;
  const ::ipc_protocol::Header& hdr() const;
  ::ipc_protocol::Header* mutable_hdr();
  ::ipc_protocol::Header* release_hdr();
  void set_allocated_hdr(::ipc_protocol::Header* hdr);

  // required sint32 code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ipc_protocol.Ack)
 private:
  inline void set_has_hdr();
  inline void clear_has_hdr();
  inline void set_has_code();
  inline void clear_has_code();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ipc_protocol::Header* hdr_;
  ::google::protobuf::int32 code_;
  friend void  protobuf_AddDesc_service_2eproto();
  friend void protobuf_AssignDesc_service_2eproto();
  friend void protobuf_ShutdownFile_service_2eproto();

  void InitAsDefaultInstance();
  static Ack* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// required fixed32 type = 1;
inline bool Header::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Header::type() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.Header.type)
  return type_;
}
inline void Header::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.Header.type)
}

// required string auth_id = 2;
inline bool Header::has_auth_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_auth_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_auth_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_auth_id() {
  auth_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_id();
}
inline const ::std::string& Header::auth_id() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.Header.auth_id)
  return auth_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_auth_id(const ::std::string& value) {
  set_has_auth_id();
  auth_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc_protocol.Header.auth_id)
}
inline void Header::set_auth_id(const char* value) {
  set_has_auth_id();
  auth_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc_protocol.Header.auth_id)
}
inline void Header::set_auth_id(const char* value, size_t size) {
  set_has_auth_id();
  auth_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc_protocol.Header.auth_id)
}
inline ::std::string* Header::mutable_auth_id() {
  set_has_auth_id();
  // @@protoc_insertion_point(field_mutable:ipc_protocol.Header.auth_id)
  return auth_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_auth_id() {
  // @@protoc_insertion_point(field_release:ipc_protocol.Header.auth_id)
  clear_has_auth_id();
  return auth_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_auth_id(::std::string* auth_id) {
  if (auth_id != NULL) {
    set_has_auth_id();
  } else {
    clear_has_auth_id();
  }
  auth_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_id);
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.Header.auth_id)
}

// required string auth_token = 3;
inline bool Header::has_auth_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_auth_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_auth_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_auth_token() {
  auth_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_token();
}
inline const ::std::string& Header::auth_token() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.Header.auth_token)
  return auth_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_auth_token(const ::std::string& value) {
  set_has_auth_token();
  auth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc_protocol.Header.auth_token)
}
inline void Header::set_auth_token(const char* value) {
  set_has_auth_token();
  auth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc_protocol.Header.auth_token)
}
inline void Header::set_auth_token(const char* value, size_t size) {
  set_has_auth_token();
  auth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc_protocol.Header.auth_token)
}
inline ::std::string* Header::mutable_auth_token() {
  set_has_auth_token();
  // @@protoc_insertion_point(field_mutable:ipc_protocol.Header.auth_token)
  return auth_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_auth_token() {
  // @@protoc_insertion_point(field_release:ipc_protocol.Header.auth_token)
  clear_has_auth_token();
  return auth_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_auth_token(::std::string* auth_token) {
  if (auth_token != NULL) {
    set_has_auth_token();
  } else {
    clear_has_auth_token();
  }
  auth_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_token);
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.Header.auth_token)
}

// optional uint32 debug_code = 4;
inline bool Header::has_debug_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Header::set_has_debug_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Header::clear_has_debug_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Header::clear_debug_code() {
  debug_code_ = 0u;
  clear_has_debug_code();
}
inline ::google::protobuf::uint32 Header::debug_code() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.Header.debug_code)
  return debug_code_;
}
inline void Header::set_debug_code(::google::protobuf::uint32 value) {
  set_has_debug_code();
  debug_code_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.Header.debug_code)
}

// -------------------------------------------------------------------

// CreateSessionRequest

// required .ipc_protocol.Header hdr = 1;
inline bool CreateSessionRequest::has_hdr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateSessionRequest::set_has_hdr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateSessionRequest::clear_has_hdr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateSessionRequest::clear_hdr() {
  if (hdr_ != NULL) hdr_->::ipc_protocol::Header::Clear();
  clear_has_hdr();
}
inline const ::ipc_protocol::Header& CreateSessionRequest::hdr() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionRequest.hdr)
  return hdr_ != NULL ? *hdr_ : *default_instance_->hdr_;
}
inline ::ipc_protocol::Header* CreateSessionRequest::mutable_hdr() {
  set_has_hdr();
  if (hdr_ == NULL) {
    hdr_ = new ::ipc_protocol::Header;
  }
  // @@protoc_insertion_point(field_mutable:ipc_protocol.CreateSessionRequest.hdr)
  return hdr_;
}
inline ::ipc_protocol::Header* CreateSessionRequest::release_hdr() {
  // @@protoc_insertion_point(field_release:ipc_protocol.CreateSessionRequest.hdr)
  clear_has_hdr();
  ::ipc_protocol::Header* temp = hdr_;
  hdr_ = NULL;
  return temp;
}
inline void CreateSessionRequest::set_allocated_hdr(::ipc_protocol::Header* hdr) {
  delete hdr_;
  hdr_ = hdr;
  if (hdr) {
    set_has_hdr();
  } else {
    clear_has_hdr();
  }
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.CreateSessionRequest.hdr)
}

// required .ipc_protocol.SessionType session_type = 2;
inline bool CreateSessionRequest::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateSessionRequest::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateSessionRequest::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateSessionRequest::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline ::ipc_protocol::SessionType CreateSessionRequest::session_type() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionRequest.session_type)
  return static_cast< ::ipc_protocol::SessionType >(session_type_);
}
inline void CreateSessionRequest::set_session_type(::ipc_protocol::SessionType value) {
  assert(::ipc_protocol::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionRequest.session_type)
}

// optional string slab_id = 3;
inline bool CreateSessionRequest::has_slab_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateSessionRequest::set_has_slab_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateSessionRequest::clear_has_slab_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateSessionRequest::clear_slab_id() {
  slab_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_slab_id();
}
inline const ::std::string& CreateSessionRequest::slab_id() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionRequest.slab_id)
  return slab_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSessionRequest::set_slab_id(const ::std::string& value) {
  set_has_slab_id();
  slab_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionRequest.slab_id)
}
inline void CreateSessionRequest::set_slab_id(const char* value) {
  set_has_slab_id();
  slab_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc_protocol.CreateSessionRequest.slab_id)
}
inline void CreateSessionRequest::set_slab_id(const char* value, size_t size) {
  set_has_slab_id();
  slab_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc_protocol.CreateSessionRequest.slab_id)
}
inline ::std::string* CreateSessionRequest::mutable_slab_id() {
  set_has_slab_id();
  // @@protoc_insertion_point(field_mutable:ipc_protocol.CreateSessionRequest.slab_id)
  return slab_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateSessionRequest::release_slab_id() {
  // @@protoc_insertion_point(field_release:ipc_protocol.CreateSessionRequest.slab_id)
  clear_has_slab_id();
  return slab_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSessionRequest::set_allocated_slab_id(::std::string* slab_id) {
  if (slab_id != NULL) {
    set_has_slab_id();
  } else {
    clear_has_slab_id();
  }
  slab_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slab_id);
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.CreateSessionRequest.slab_id)
}

// optional uint64 memory_size = 4;
inline bool CreateSessionRequest::has_memory_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateSessionRequest::set_has_memory_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateSessionRequest::clear_has_memory_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateSessionRequest::clear_memory_size() {
  memory_size_ = GOOGLE_ULONGLONG(0);
  clear_has_memory_size();
}
inline ::google::protobuf::uint64 CreateSessionRequest::memory_size() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionRequest.memory_size)
  return memory_size_;
}
inline void CreateSessionRequest::set_memory_size(::google::protobuf::uint64 value) {
  set_has_memory_size();
  memory_size_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionRequest.memory_size)
}

// optional uint64 storage_size = 5;
inline bool CreateSessionRequest::has_storage_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateSessionRequest::set_has_storage_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateSessionRequest::clear_has_storage_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateSessionRequest::clear_storage_size() {
  storage_size_ = GOOGLE_ULONGLONG(0);
  clear_has_storage_size();
}
inline ::google::protobuf::uint64 CreateSessionRequest::storage_size() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionRequest.storage_size)
  return storage_size_;
}
inline void CreateSessionRequest::set_storage_size(::google::protobuf::uint64 value) {
  set_has_storage_size();
  storage_size_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionRequest.storage_size)
}

// optional uint64 virtual_size = 6;
inline bool CreateSessionRequest::has_virtual_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateSessionRequest::set_has_virtual_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateSessionRequest::clear_has_virtual_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateSessionRequest::clear_virtual_size() {
  virtual_size_ = GOOGLE_ULONGLONG(0);
  clear_has_virtual_size();
}
inline ::google::protobuf::uint64 CreateSessionRequest::virtual_size() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionRequest.virtual_size)
  return virtual_size_;
}
inline void CreateSessionRequest::set_virtual_size(::google::protobuf::uint64 value) {
  set_has_virtual_size();
  virtual_size_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionRequest.virtual_size)
}

// -------------------------------------------------------------------

// CreateSessionReply

// required .ipc_protocol.Header hdr = 1;
inline bool CreateSessionReply::has_hdr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateSessionReply::set_has_hdr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateSessionReply::clear_has_hdr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateSessionReply::clear_hdr() {
  if (hdr_ != NULL) hdr_->::ipc_protocol::Header::Clear();
  clear_has_hdr();
}
inline const ::ipc_protocol::Header& CreateSessionReply::hdr() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.hdr)
  return hdr_ != NULL ? *hdr_ : *default_instance_->hdr_;
}
inline ::ipc_protocol::Header* CreateSessionReply::mutable_hdr() {
  set_has_hdr();
  if (hdr_ == NULL) {
    hdr_ = new ::ipc_protocol::Header;
  }
  // @@protoc_insertion_point(field_mutable:ipc_protocol.CreateSessionReply.hdr)
  return hdr_;
}
inline ::ipc_protocol::Header* CreateSessionReply::release_hdr() {
  // @@protoc_insertion_point(field_release:ipc_protocol.CreateSessionReply.hdr)
  clear_has_hdr();
  ::ipc_protocol::Header* temp = hdr_;
  hdr_ = NULL;
  return temp;
}
inline void CreateSessionReply::set_allocated_hdr(::ipc_protocol::Header* hdr) {
  delete hdr_;
  hdr_ = hdr;
  if (hdr) {
    set_has_hdr();
  } else {
    clear_has_hdr();
  }
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.CreateSessionReply.hdr)
}

// required int64 status = 2;
inline bool CreateSessionReply::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateSessionReply::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateSessionReply::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateSessionReply::clear_status() {
  status_ = GOOGLE_LONGLONG(0);
  clear_has_status();
}
inline ::google::protobuf::int64 CreateSessionReply::status() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.status)
  return status_;
}
inline void CreateSessionReply::set_status(::google::protobuf::int64 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.status)
}

// required string session_id = 3;
inline bool CreateSessionReply::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateSessionReply::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateSessionReply::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateSessionReply::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_id();
}
inline const ::std::string& CreateSessionReply::session_id() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSessionReply::set_session_id(const ::std::string& value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.session_id)
}
inline void CreateSessionReply::set_session_id(const char* value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc_protocol.CreateSessionReply.session_id)
}
inline void CreateSessionReply::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc_protocol.CreateSessionReply.session_id)
}
inline ::std::string* CreateSessionReply::mutable_session_id() {
  set_has_session_id();
  // @@protoc_insertion_point(field_mutable:ipc_protocol.CreateSessionReply.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateSessionReply::release_session_id() {
  // @@protoc_insertion_point(field_release:ipc_protocol.CreateSessionReply.session_id)
  clear_has_session_id();
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSessionReply::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.CreateSessionReply.session_id)
}

// optional fixed64 phys_addr = 4;
inline bool CreateSessionReply::has_phys_addr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateSessionReply::set_has_phys_addr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateSessionReply::clear_has_phys_addr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateSessionReply::clear_phys_addr() {
  phys_addr_ = GOOGLE_ULONGLONG(0);
  clear_has_phys_addr();
}
inline ::google::protobuf::uint64 CreateSessionReply::phys_addr() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.phys_addr)
  return phys_addr_;
}
inline void CreateSessionReply::set_phys_addr(::google::protobuf::uint64 value) {
  set_has_phys_addr();
  phys_addr_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.phys_addr)
}

// optional fixed64 virt_addr = 5;
inline bool CreateSessionReply::has_virt_addr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateSessionReply::set_has_virt_addr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateSessionReply::clear_has_virt_addr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateSessionReply::clear_virt_addr() {
  virt_addr_ = GOOGLE_ULONGLONG(0);
  clear_has_virt_addr();
}
inline ::google::protobuf::uint64 CreateSessionReply::virt_addr() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.virt_addr)
  return virt_addr_;
}
inline void CreateSessionReply::set_virt_addr(::google::protobuf::uint64 value) {
  set_has_virt_addr();
  virt_addr_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.virt_addr)
}

// optional fixed64 storage_addr = 6;
inline bool CreateSessionReply::has_storage_addr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateSessionReply::set_has_storage_addr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateSessionReply::clear_has_storage_addr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateSessionReply::clear_storage_addr() {
  storage_addr_ = GOOGLE_ULONGLONG(0);
  clear_has_storage_addr();
}
inline ::google::protobuf::uint64 CreateSessionReply::storage_addr() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.storage_addr)
  return storage_addr_;
}
inline void CreateSessionReply::set_storage_addr(::google::protobuf::uint64 value) {
  set_has_storage_addr();
  storage_addr_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.storage_addr)
}

// optional fixed32 foobar = 7;
inline bool CreateSessionReply::has_foobar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreateSessionReply::set_has_foobar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreateSessionReply::clear_has_foobar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreateSessionReply::clear_foobar() {
  foobar_ = 0u;
  clear_has_foobar();
}
inline ::google::protobuf::uint32 CreateSessionReply::foobar() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.foobar)
  return foobar_;
}
inline void CreateSessionReply::set_foobar(::google::protobuf::uint32 value) {
  set_has_foobar();
  foobar_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.foobar)
}

// optional bool reconstructed = 8;
inline bool CreateSessionReply::has_reconstructed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreateSessionReply::set_has_reconstructed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CreateSessionReply::clear_has_reconstructed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CreateSessionReply::clear_reconstructed() {
  reconstructed_ = false;
  clear_has_reconstructed();
}
inline bool CreateSessionReply::reconstructed() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.reconstructed)
  return reconstructed_;
}
inline void CreateSessionReply::set_reconstructed(bool value) {
  set_has_reconstructed();
  reconstructed_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.reconstructed)
}

// optional uint64 phys_size = 9;
inline bool CreateSessionReply::has_phys_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CreateSessionReply::set_has_phys_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CreateSessionReply::clear_has_phys_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CreateSessionReply::clear_phys_size() {
  phys_size_ = GOOGLE_ULONGLONG(0);
  clear_has_phys_size();
}
inline ::google::protobuf::uint64 CreateSessionReply::phys_size() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.phys_size)
  return phys_size_;
}
inline void CreateSessionReply::set_phys_size(::google::protobuf::uint64 value) {
  set_has_phys_size();
  phys_size_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.phys_size)
}

// optional string path = 10;
inline bool CreateSessionReply::has_path() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CreateSessionReply::set_has_path() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CreateSessionReply::clear_has_path() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CreateSessionReply::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& CreateSessionReply::path() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSessionReply::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.path)
}
inline void CreateSessionReply::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc_protocol.CreateSessionReply.path)
}
inline void CreateSessionReply::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc_protocol.CreateSessionReply.path)
}
inline ::std::string* CreateSessionReply::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:ipc_protocol.CreateSessionReply.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateSessionReply::release_path() {
  // @@protoc_insertion_point(field_release:ipc_protocol.CreateSessionReply.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSessionReply::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.CreateSessionReply.path)
}

// optional uint64 offset = 11;
inline bool CreateSessionReply::has_offset() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CreateSessionReply::set_has_offset() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CreateSessionReply::clear_has_offset() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CreateSessionReply::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::uint64 CreateSessionReply::offset() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.offset)
  return offset_;
}
inline void CreateSessionReply::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.offset)
}

// optional uint32 block_size = 12;
inline bool CreateSessionReply::has_block_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CreateSessionReply::set_has_block_size() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CreateSessionReply::clear_has_block_size() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CreateSessionReply::clear_block_size() {
  block_size_ = 0u;
  clear_has_block_size();
}
inline ::google::protobuf::uint32 CreateSessionReply::block_size() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.CreateSessionReply.block_size)
  return block_size_;
}
inline void CreateSessionReply::set_block_size(::google::protobuf::uint32 value) {
  set_has_block_size();
  block_size_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.CreateSessionReply.block_size)
}

// -------------------------------------------------------------------

// ShutdownSession

// required .ipc_protocol.Header hdr = 1;
inline bool ShutdownSession::has_hdr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShutdownSession::set_has_hdr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShutdownSession::clear_has_hdr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShutdownSession::clear_hdr() {
  if (hdr_ != NULL) hdr_->::ipc_protocol::Header::Clear();
  clear_has_hdr();
}
inline const ::ipc_protocol::Header& ShutdownSession::hdr() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.ShutdownSession.hdr)
  return hdr_ != NULL ? *hdr_ : *default_instance_->hdr_;
}
inline ::ipc_protocol::Header* ShutdownSession::mutable_hdr() {
  set_has_hdr();
  if (hdr_ == NULL) {
    hdr_ = new ::ipc_protocol::Header;
  }
  // @@protoc_insertion_point(field_mutable:ipc_protocol.ShutdownSession.hdr)
  return hdr_;
}
inline ::ipc_protocol::Header* ShutdownSession::release_hdr() {
  // @@protoc_insertion_point(field_release:ipc_protocol.ShutdownSession.hdr)
  clear_has_hdr();
  ::ipc_protocol::Header* temp = hdr_;
  hdr_ = NULL;
  return temp;
}
inline void ShutdownSession::set_allocated_hdr(::ipc_protocol::Header* hdr) {
  delete hdr_;
  hdr_ = hdr;
  if (hdr) {
    set_has_hdr();
  } else {
    clear_has_hdr();
  }
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.ShutdownSession.hdr)
}

// -------------------------------------------------------------------

// ReleaseSessionRequest

// required .ipc_protocol.Header hdr = 1;
inline bool ReleaseSessionRequest::has_hdr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReleaseSessionRequest::set_has_hdr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReleaseSessionRequest::clear_has_hdr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReleaseSessionRequest::clear_hdr() {
  if (hdr_ != NULL) hdr_->::ipc_protocol::Header::Clear();
  clear_has_hdr();
}
inline const ::ipc_protocol::Header& ReleaseSessionRequest::hdr() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.ReleaseSessionRequest.hdr)
  return hdr_ != NULL ? *hdr_ : *default_instance_->hdr_;
}
inline ::ipc_protocol::Header* ReleaseSessionRequest::mutable_hdr() {
  set_has_hdr();
  if (hdr_ == NULL) {
    hdr_ = new ::ipc_protocol::Header;
  }
  // @@protoc_insertion_point(field_mutable:ipc_protocol.ReleaseSessionRequest.hdr)
  return hdr_;
}
inline ::ipc_protocol::Header* ReleaseSessionRequest::release_hdr() {
  // @@protoc_insertion_point(field_release:ipc_protocol.ReleaseSessionRequest.hdr)
  clear_has_hdr();
  ::ipc_protocol::Header* temp = hdr_;
  hdr_ = NULL;
  return temp;
}
inline void ReleaseSessionRequest::set_allocated_hdr(::ipc_protocol::Header* hdr) {
  delete hdr_;
  hdr_ = hdr;
  if (hdr) {
    set_has_hdr();
  } else {
    clear_has_hdr();
  }
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.ReleaseSessionRequest.hdr)
}

// required .ipc_protocol.SessionType session_type = 2;
inline bool ReleaseSessionRequest::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReleaseSessionRequest::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReleaseSessionRequest::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReleaseSessionRequest::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline ::ipc_protocol::SessionType ReleaseSessionRequest::session_type() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.ReleaseSessionRequest.session_type)
  return static_cast< ::ipc_protocol::SessionType >(session_type_);
}
inline void ReleaseSessionRequest::set_session_type(::ipc_protocol::SessionType value) {
  assert(::ipc_protocol::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.ReleaseSessionRequest.session_type)
}

// required string session_id = 3;
inline bool ReleaseSessionRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReleaseSessionRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReleaseSessionRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReleaseSessionRequest::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_id();
}
inline const ::std::string& ReleaseSessionRequest::session_id() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.ReleaseSessionRequest.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReleaseSessionRequest::set_session_id(const ::std::string& value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc_protocol.ReleaseSessionRequest.session_id)
}
inline void ReleaseSessionRequest::set_session_id(const char* value) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc_protocol.ReleaseSessionRequest.session_id)
}
inline void ReleaseSessionRequest::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc_protocol.ReleaseSessionRequest.session_id)
}
inline ::std::string* ReleaseSessionRequest::mutable_session_id() {
  set_has_session_id();
  // @@protoc_insertion_point(field_mutable:ipc_protocol.ReleaseSessionRequest.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReleaseSessionRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:ipc_protocol.ReleaseSessionRequest.session_id)
  clear_has_session_id();
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReleaseSessionRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.ReleaseSessionRequest.session_id)
}

// -------------------------------------------------------------------

// Ack

// required .ipc_protocol.Header hdr = 1;
inline bool Ack::has_hdr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ack::set_has_hdr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ack::clear_has_hdr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ack::clear_hdr() {
  if (hdr_ != NULL) hdr_->::ipc_protocol::Header::Clear();
  clear_has_hdr();
}
inline const ::ipc_protocol::Header& Ack::hdr() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.Ack.hdr)
  return hdr_ != NULL ? *hdr_ : *default_instance_->hdr_;
}
inline ::ipc_protocol::Header* Ack::mutable_hdr() {
  set_has_hdr();
  if (hdr_ == NULL) {
    hdr_ = new ::ipc_protocol::Header;
  }
  // @@protoc_insertion_point(field_mutable:ipc_protocol.Ack.hdr)
  return hdr_;
}
inline ::ipc_protocol::Header* Ack::release_hdr() {
  // @@protoc_insertion_point(field_release:ipc_protocol.Ack.hdr)
  clear_has_hdr();
  ::ipc_protocol::Header* temp = hdr_;
  hdr_ = NULL;
  return temp;
}
inline void Ack::set_allocated_hdr(::ipc_protocol::Header* hdr) {
  delete hdr_;
  hdr_ = hdr;
  if (hdr) {
    set_has_hdr();
  } else {
    clear_has_hdr();
  }
  // @@protoc_insertion_point(field_set_allocated:ipc_protocol.Ack.hdr)
}

// required sint32 code = 2;
inline bool Ack::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ack::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ack::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ack::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 Ack::code() const {
  // @@protoc_insertion_point(field_get:ipc_protocol.Ack.code)
  return code_;
}
inline void Ack::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:ipc_protocol.Ack.code)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ipc_protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ipc_protocol::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ipc_protocol::MessageType>() {
  return ::ipc_protocol::MessageType_descriptor();
}
template <> struct is_proto_enum< ::ipc_protocol::SessionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ipc_protocol::SessionType>() {
  return ::ipc_protocol::SessionType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2eproto__INCLUDED
