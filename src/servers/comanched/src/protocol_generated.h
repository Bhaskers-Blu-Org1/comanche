// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROTOCOL_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_PROTOCOL_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

namespace Protocol {

struct Message;

struct ElementMemoryRequest;

enum MessageType {
  MessageType_Memory_request = 0,
  MessageType_MIN = MessageType_Memory_request,
  MessageType_MAX = MessageType_Memory_request
};

inline MessageType (&EnumValuesMessageType())[1] {
  static MessageType values[] = {
    MessageType_Memory_request
  };
  return values;
}

inline const char **EnumNamesMessageType() {
  static const char *names[] = {
    "Memory_request",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageType(MessageType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesMessageType()[index];
}

enum Element {
  Element_NONE = 0,
  Element_ElementMemoryRequest = 1,
  Element_MIN = Element_NONE,
  Element_MAX = Element_ElementMemoryRequest
};

inline Element (&EnumValuesElement())[2] {
  static Element values[] = {
    Element_NONE,
    Element_ElementMemoryRequest
  };
  return values;
}

inline const char **EnumNamesElement() {
  static const char *names[] = {
    "NONE",
    "ElementMemoryRequest",
    nullptr
  };
  return names;
}

inline const char *EnumNameElement(Element e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesElement()[index];
}

template<typename T> struct ElementTraits {
  static const Element enum_value = Element_NONE;
};

template<> struct ElementTraits<ElementMemoryRequest> {
  static const Element enum_value = Element_ElementMemoryRequest;
};

bool VerifyElement(flatbuffers::Verifier &verifier, const void *obj, Element type);
bool VerifyElementVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SENDER_ID = 4,
    VT_ELEMENTS_TYPE = 6,
    VT_ELEMENTS = 8
  };
  int64_t sender_id() const {
    return GetField<int64_t>(VT_SENDER_ID, 0);
  }
  const flatbuffers::Vector<uint8_t> *elements_type() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_ELEMENTS_TYPE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<void>> *elements() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<void>> *>(VT_ELEMENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_SENDER_ID) &&
           VerifyOffset(verifier, VT_ELEMENTS_TYPE) &&
           verifier.Verify(elements_type()) &&
           VerifyOffset(verifier, VT_ELEMENTS) &&
           verifier.Verify(elements()) &&
           VerifyElementVector(verifier, elements(), elements_type()) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sender_id(int64_t sender_id) {
    fbb_.AddElement<int64_t>(Message::VT_SENDER_ID, sender_id, 0);
  }
  void add_elements_type(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> elements_type) {
    fbb_.AddOffset(Message::VT_ELEMENTS_TYPE, elements_type);
  }
  void add_elements(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> elements) {
    fbb_.AddOffset(Message::VT_ELEMENTS, elements);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageBuilder &operator=(const MessageBuilder &);
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t sender_id = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> elements_type = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> elements = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_sender_id(sender_id);
  builder_.add_elements(elements);
  builder_.add_elements_type(elements_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message> CreateMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t sender_id = 0,
    const std::vector<uint8_t> *elements_type = nullptr,
    const std::vector<flatbuffers::Offset<void>> *elements = nullptr) {
  return Protocol::CreateMessage(
      _fbb,
      sender_id,
      elements_type ? _fbb.CreateVector<uint8_t>(*elements_type) : 0,
      elements ? _fbb.CreateVector<flatbuffers::Offset<void>>(*elements) : 0);
}

struct ElementMemoryRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SIZE = 4
  };
  uint64_t size() const {
    return GetField<uint64_t>(VT_SIZE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_SIZE) &&
           verifier.EndTable();
  }
};

struct ElementMemoryRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_size(uint64_t size) {
    fbb_.AddElement<uint64_t>(ElementMemoryRequest::VT_SIZE, size, 0);
  }
  explicit ElementMemoryRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ElementMemoryRequestBuilder &operator=(const ElementMemoryRequestBuilder &);
  flatbuffers::Offset<ElementMemoryRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ElementMemoryRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<ElementMemoryRequest> CreateElementMemoryRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t size = 0) {
  ElementMemoryRequestBuilder builder_(_fbb);
  builder_.add_size(size);
  return builder_.Finish();
}

inline bool VerifyElement(flatbuffers::Verifier &verifier, const void *obj, Element type) {
  switch (type) {
    case Element_NONE: {
      return true;
    }
    case Element_ElementMemoryRequest: {
      auto ptr = reinterpret_cast<const ElementMemoryRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyElementVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyElement(
        verifier,  values->Get(i), types->GetEnum<Element>(i))) {
      return false;
    }
  }
  return true;
}

inline const Protocol::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<Protocol::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Protocol::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Protocol::Message> root) {
  fbb.Finish(root);
}

}  // namespace Protocol

#endif  // FLATBUFFERS_GENERATED_PROTOCOL_PROTOCOL_H_
