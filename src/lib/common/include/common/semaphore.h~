#ifndef __COMMON_SEMAPHORE_H__
#define __COMMON_SEMAPHORE_H__

#include <mutex>
#include <condition_variable>
#include <atomic>
#include <condition_variable>
#include <thread>
#include <chrono>

namespace comanche
{

class Semaphore {
public:
  Semaphore (int count_ = 0)
    : count(count_) {}

  inline void post()
  {
    std::unique_lock<std::mutex> lock(mtx);
    count++;
    cv.notify_one();
  }

  inline void wait()
  {
    std::unique_lock<std::mutex> lock(mtx);

    while(count == 0){
      cv.wait(lock);
    }
    count--;
  }

  inline void wait_for(const std::chrono::duration<Rep, Period>& rel_time)
  {
    std::unique_lock<std::mutex> lock(mtx);

    while(count == 0){
      cv.wait_for(lock, rel_time);
    }
    count--;
  }

private:
  std::mutex mtx;
  std::condition_variable cv;
  int count;
};

} // namespace comanche
#endif
